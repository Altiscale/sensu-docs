[{"title":"Extensions","product":"Extensions","version":"1.0","location":"/extensions/1.0/","display_name":"Extensions 1.0: Extensions","content":" COMING SOON "},{"title":"Extensions","product":"Extensions","version":"latest","location":"/extensions/","display_name":"Extensions latest: Extensions","content":""},{"title":"Sensu Documentation Home","version":"latest","location":"/","display_name":"undefined latest: Sensu Documentation Home","content":""},{"title":"Developer Guidelines","product":"Plugins","version":"2.3","location":"/plugins/2.3/developer_guidelines","display_name":"Plugins 2.3: Developer Guidelines","content":"Table of Contents Naming Conventionsnamingconventions Coding Stylecodingstyle Copyright and Licensingcopyrightandlicensing Documentationdocumentation Changelogchangelog Dependency Managementdependencymanagement Issue and Pull Request Submissionsissueandpullrequestsubmissions Gem Metadatagemmetadata Additional Informationadditionalinformation Naming Conventions All binaries should start with either handler check metrics or mutator depending on their primary function This is done to ensure that a user can tell from the command what the primary action of the script is It also makes things easier for infrastructure tools The names of scripts should use dashes to separate words and contain an extension rb sh exe etc Extensions are unfortunately necessary for Sensu to be able to directly exec plugins and handlers on Windows All scripts should also be made executable using chmod x plugin or a similar method There is a rake task that is run by Travis that will automatically make all files in bin executable if this is not done Any repos created need to follow the format of sensupluginsapp where app is the name such as windows diskchecks or influxdb The exception to the rule are repos used for the site or tooling such as GIR or sensupluginsgithubio This is done so that the rake tasks and other automation tools can easily parse Github and effectively work with the 150 repos Coding Style When developing plugins please use the sensu plugin class1 this ensures all plugins have an identical run structure When using options please use the following structure At the very least the option needs to include a description to assist the user with configuration and deployment option port short p PORT long port PORT description Port Each script should use the following standard header usrbinenv ruby DESCRIPTION OUTPUT plain text metric data etc PLATFORMS Linux Windows BSD Solaris etc DEPENDENCIES gem sensuplugin USAGE NOTES LICENSE Released under the same terms as Sensu the MIT license see LICENSE for details When at all possible preference is given to pure Ruby implementations There should only be system or platform dependencies in the specific gems that use them such as sensupluginswindows Copyright and Licensing The preferred license for all code associated with the project is the MIT License15 other compatible licenses can certainly be looked at by the community as whole Any code that is written is owned by the developer and as such the copyright if they desire should be set to themselves This is an open source project and built upon the collective code of all who contribute no one person or entity owns everything If for whatever reason they wish to not assign copyright to themselves then it can be assigned to sensuplugins Documentation All documentation will be handled by Yard2 using the default markup at this time A brief introduction to Yard markup can be found here3 All scripts should have as much documentation coverage as possible ideally 100 Coverage can be tested by installing Yard locally and running rake yard Changelog The change log should follow the format listed here20 Please keep this changelog up to date if you make changes to the repo and submit a PR please update the changelog accordingly Please follow the guidelines below when updating the changelog with respect to which number to bump Dependency Management Dependencies ruby gems packages etc and other requirements should be declared in the header of the plugin and more importantly in the gemspec Try to use the standard library or the same dependencies as other plugins to keep the stack as small as possible Questions about using a specific gem feel can be opened as issues on Github or feel free to ask the mailing list Issue and Pull Request Submissions If you see something wrong or come across a bug please open up an issue try to include as much data in the issue as possible If you feel the issue is critical than tag a team member and we will respond as soon as is feasible Pull requests need to follow the guidelines below for the quickest possible merge These not only make our lives easier but also keep the repo and commit history as clean as possible Please do a git pull rebase both before you start working on the repo and then before you commit This will help ensure the most up to date codebase Rubocop rules and documentation is available It will also go along way towards cutting down or eliminatinghopefully annoying merge commits The CHANGELOG follows the standard conventions laid out here20 Every PR has to include an updated CHANGELOG and README if needed this makes our lives eaiser increases the accuracy of the codebase and gets your PR deployed much faster When updating the version in the changelog please keep the following in mind the patch version is for any nonbreaking changes to existing scripts or the addition of minor functionality to existing scripts the minor version is for the addition of any new scripts Even though this is generally nonbreaking it is a major change to the gem and should be indicitated as such the major version should only be bumped by a core contributor This is for major breaking or nonbreaking changes that affect widespreadspread functionality Examples of this would be a wholesale refactor of the repo or a switch away from an established method such as going from SOAP to REST across multiple checks All new scripts modules or classes must be fully tested There are well documented examples in the pagerduty21 plugin Tracking the status of your PR or issue or seeing all open tickets in the org regardless of repo is simple using Github filters16 To get started click on the Github logo in the upper left and select either Pull Requests or Issues In the search box you will see several terms predefined for you change authorname to usersensuplugins to see across the entire org Please do not not abandon your pull request only you can help us merge it We will wait for feedback from you on your pull request for up to sixty days A lack of feedback in after this may require you to reopen your pull request If you would like to make a pull request and the repo does not already exist then please feel free to directly contact a member of the team using our public email address or open an issue in the Feature Request19 repo and we will create a repo for you As a general rule if you ask to have a repo created you will also be given write access to it by default Gem Metadata Each gem has metadata that can easily be queried and is designed to allow a user or contributor to get a good quick read on the current status of the gem and how stable it is This functions much like the Milestone idea that Logstash plugins are built around thanks goes out to hatt for suggesting this smetadata maintainer The maintainer field can be anyone feel free to reach out to the team about adding your github handle to the gem and assuming ownership of it Many of these plugins require specialized knowledge and by their very nature many people depend upon them to be high quality smetadata developmentstatus The developmentstatus filed allows users know the development state of a plugin active active development is on going by a developer or maintainer maintenance no active refactoring or development but someone is watching out for any new prs or things to do unmaintained the community as a whole is keeping an eye on this but no one has staked a claim to it most plugins will end up here smetadata productionstatus The productionstatus field gives a quick glance on whether the gem should be used for production grade monitoring or if some review and care should be taken production grade near 100 rspec and yardoc coverage stable review recommended incomplete rspec and yardoc coverage stable review required littleno rspec andor yardoc coverage unstable testing recommended throw stuff at the wall and hope it sticks currently most gems are here Additional Information Testingtesting Build and Release Tools and Pipelinereleaseprocess 1 httpsgithubcomsensusensuplugin 2 httpyardocorg 3 httpwwwrubydocinfogemsyardfiledocsGettingStartedmd 4 httpsgithubcomsensupluginsGIRblobmasterfilestemplatesgemVagrantfileerb 5 httpswwwvagrantupcom 6 httpsgithubcomsensupluginsGIRblobmasterfilestemplatesgemrubocopymlerb 7 httpsgithubcomsensupluginsGIRblobmasterfilestemplatesgemtravisymlerb 8 httpsgithubcomsensupluginsGIRblobmasterfilestemplatesgemRakefileerb 9 httpsgithubcomsensusensupluginspec 10 httpsgithubcomorgssensupluginspeople 11 httpsensupluginsgithubiodevelopmentgir 12 httpswaffleiosensupluginssensupluginsgithubio 13 httpsgithubcomsensupluginsdocumentation 14 httpsgithubcomsensupluginsdocumentationblobmastertoolsgirv2md 15 httpopensourceorglicensesMIT 16 httpshelpgithubcomarticlessearchingissues 18 httpstravisciorg 19 httpsgithubcomsensupluginssensupluginsfeaturerequests 20 httpkeepachangelogcom 21 httpsgithubcomsensupluginssensupluginspagerduty"},{"title":"FAQ","product":"Plugins","version":"2.3","location":"/plugins/2.3/faq","display_name":"Plugins 2.3: FAQ","content":" Why did you split the repos This was done to simplify the deployment and delivery process When working with a repo as diverse as the communityplugins its very hard to version and deploy it in the methods that we all would like Splitting the repo into smaller pieces makes this much easier and more manageable in the long run Why are the repos named this way The repos are named based up the application product or function they are associated with This means that if you use apache you need only install the sensupluginsapache gem or clone the repo When it comes to handlers and mutators the same convention was used so that in the future if a check is added the repo name wont change Sensupluginspagerduty is a great example it may only contain handlers at this time but if in the future we want to add a check of an endpoint we dont need to do anything more than bump the version and update the docs Besides having a standard naming convention makes automation and deployment tools very happy and we all use them right How do I know what a repo contains One of the conditions for dropping the prerelease or alpha tag will be a complete README that will include a list of all binaries and what each one does sensupluginsdiskchecks1 does this now Why did you change the filenames and why name them this way One of the overriding issues is that there should be a standard naming scheme for the entire framework It is very hard to effectively automate something if the pieces are scattered or named differently As of now the current names are here to stay What about tests how do I know a plugin works as designed Tests are coming that is one of the core requirements for stability and production grade Tests are hard to write for some of these things given the very specific nature of them and most of us have other jobs so we can only contribute so much How do I use this handler deploy this check The readme will contain sample configs and commands Many of the plugins also have a header that contains specific details If this is lacking ask in Slackhttpsslacksensuio or on the mailing listhttpsgroupsgooglecomforumforumsensuusers and someone will be able to assist you Will the communityplugins repo be deleted and if so when No It will be frozen in place at a date TBD most likely sometime Fall 2015 although that is a moving target and dependent upon a lot of things How should I deploy the new plugins If a gem exists then that would be the best way Instructions for installing it can be found in the README of the repo or here3 If no gem exists yet then you can attempt to build one based upon the gemspec You can also install straight from source All repos have releases you can just download the latest tarball or zip file cloning the master branch is not recommended supported and never will be Unless its a breaking change the repo will not contain feature branches everything will be pushed to master You have been warned Checks are invasive how do I know they havent been tampered with All gems will be signed and each repo will contain the public key If you are really concerned you could just inspect the code yourself as well before deployment Will you be targeting other pkg management systems Not at this time due to the design of Sensu gems are the best choice RPMs and Deb packages have not been ruled out but the manpower to create them is just not there at this time If you have a very strong interest in this drop us a line and we can chat some more Are the gems dependent upon Rubygems No What is the policy on supporting endoflifeEOL Ruby versions We will target all non EOL Ruby versions please check the link below the see the current EOL version httpswwwrubylangorgendownloadsbranches What versions or Ruby do you test against We strive to test on all nonEOL versions It can take time to add new versions to all plugins What do you use for linting Rubocop Details are in rubocopyml within the root of each repo and in the developer guidelines2 What do you use for testing RSpec 1 httpsgithubcomsensupluginssensupluginsdiskchecks 2 developerguidelines 3 installation"},{"title":"Getting Started","product":"Plugins","version":"2.3","location":"/plugins/2.3/getting_started","display_name":"Plugins 2.3: Getting Started","content":"Table of Contents InfrastructureInfrastructure Githubgithub Trellotrello Websitewebsite Policiespolicies Organization Accessorganizationaccess Organization Structureorganizationstructure SensuPlugin Org Guidelines Infrastructure Github Github and the issues and milestones within it are the primary way the project is managed All plugin repositories are created from a standard template using a rake task to ensure that they remain consistent and manageable at an organization level There are currently five teams in the org Owners unrestricted access to the org and all repos Admins write access to all repos except core infrastructure Contributors write access to all plugin repos Core Infra write access to sensuplugin sensupluginspec GIR Kryten sensuplugingithubio tomservo and the hubots Documentation write access to the documentation repo Note Members in the Owners or Core Infra team must provide a voice number Due to the permissions and far reaching affect of these teams security practices are heavily enforced and any compromises must be dealt with immediately Trello There is a public Trello boardhttpstrellocombQjkJ8CS3sensucommunityplugins used for communicating various project wide items This is still a work in progress but it works for now Ideas are always welcome Website sensupluginsiohttpsensupluginsio Policies This is a volunteer project and as such comitters are free to come and go No one is required to do any amount of work to continue as a comitter some days you may do a ton of work or you may be on vacation or doing something that pays the bills for several weeks No worries Organization Access This is a public organization and as such anyone may join the only requirements are a firm belief in treating your infrastructure as code and 2FA on your github account Organization Structure Becoming a member of each of these groups and teams is an open decision You may be invited by any member of the team and the majority of the other team members can approve There is no time limit before being invited into a team and no set amount of work that needs to be accomplished once you are in a team You may also request to be given commit bit by openning an issue in a repo and mentioning an existing commiter We will then be happy to start a dialogue with you For security purposes though if you have not made any contributions in the last 6 months you may be removed from a team and can request access again at any time by reaching out and contacting an existing team member Any membership issues will be resolved by members of the Admin group after consultation with all parties in a public forumn If either party feels the issue is not resolved then they may reach out privately or publicly to either Matt Jones or Sean Porter or another member of the Owners group for assistance Their decisions are final core committer A committer who has read access to all public and private repos including these specific privilages Can push directly to Github and RubyGems Access to the sensuplugin bot account Access to the slack channel Access to the Google Apps account Access to the Twitter account Any member of this group must also provide a voice number that they can be reached at Due to the widespread permissions security practices are heavily enforced and any compromises must be dealt with immediately committer A commiter who has push access to all plugin repos They can either be a member of a team or be granted rights to specific repos using Githubs contributor org permissions They also have the following privilages after 6 months of continued effort or a demostrated need Discount to Tower2 OSX Git Client Access to DO droplets for testing Open Source License to various Jet Brains IDEs The ability to have an email address sensupluginsio restrictions apply The ability to become a member of the SensuPlugins Google Apps Org An invitation to the Sensu Slack org restrictions apply contributor A Github user who has had one or more merges committed to any repo but does not yet have push access to a repo"},{"title":"GSoC 15","product":"Plugins","version":"2.3","location":"/plugins/2.3/gsoc","display_name":"Plugins 2.3: GSoC 15","content":"Creating a set of production grade gems from the Sensu Community Plugins2 is a huge task that will take considerable time only with the continued effort of many people can this goal can be achieved The original community plugins repo has already been split in smaller repos3 based upon application This means all the Windows plugins handlers etc are in a repo named sensupluginswindows the aws ones are in sensupluginsaws and so on This is only the first step towards completing the transformation existing tooling will need to be improved and new tooling created for managing all the repos separately but also as a whole A maintainer should be able to issue a single command and have a template generated and installed in all repos manually copying a file to every repo is so 2006 D Task General refactoring of community plugins code base Brief explanation All the binaries in a repository should be broken down into libraries and any common code should be shared All new code should be written in Ruby and when possible existing code in other languages should be converted or its functionality should be folded into other code Expected Results Minimal code duplication Standard4 Ruby coding practices Ephemeral data whenever needed no traces left on a monitored system including temp files used to store state data Favor a pure ruby method over a arch specific method even at the sacrifice of code complexity ie sysfilesystem gem vs df Note Not every repository needs to be complete a list of high priority repos or ones of particular interest will be mutually determined Why Work On This This would be a great project for someone who wants to improve their Ruby skills or learn about using various Open Source apis and how to integrate with them Much of the code is already written so the ability to examine functional code in various styles could be very beneficial Knowledge prerequisite general Ruby knowledge or advanced knowledge of PerlPython general concepts of monitoring or willingness to learn them general understanding of how to define generate and handle exit codes and what they mean within a monitoring environment must believe in and understand treating infrastructure as code ephemeral data and why this is necessary in a cloud environment Skill level beginnermedium someone with an established track record of rapid learning will do fine Mentor Matt Jones5 or Artem Chernikov6 Proposal Guidelines When submitting your proposal please pick one or more repos and explain why you want to work with them and any domain specific knowledge or skills you have to help you complete the task Task Automated testing framework built around Travis using standard Ruby methods practices and tools Brief explanation In order to be considered production grade test coverage needs to be fairly high and not everyone has the time or ability to write tests A framework should be designed and built to automate the process of writing and executing tests There is a fair amount of latitude in how this is accomplished as minimal work has been done on this A good starting point would be the sensupluginsspec7 repo Expected Results We expect to have the foundation for a set of tools written in Ruby which will Improve the existing set of development tools including GIR1 which is currently able to bootstrap a plugin development environment including gem and repo creation Create an automated testing framework which will allow us to run a set of tests within virtual machines and report back the status of that process Why Work On This This would be a great project for someone who wants to improve their Ruby skills and learn more about tool writing and writing automated test suites This is a ground up project so you would have the ability to contribute in a major way including helping to select the test packages and work on the design of the tooling to help facilitate its use Knowledge prerequisite general understanding of various testing tools such as rspec rubocop and serverspec basic understanding of TravisCI Vagrant and RVM would be helpful but are not necessary basic understanding of Rake basic understanding of current infrastructure automation and tooling must believe in and understand treating infrastructure as code ephemeral data and why this is necessary in a cloud environment Skill Level medium Mentor Matt Jones5 or Artem Chernikov6 Proposal Guidelines When submitting your proposal please explain your views on testing code and infrastructure along with specific knowledge or skills you have to help you complete the task A brief summary of your choice of tools and why you pick them should also be included Task A simple comprehensive directory of all monitors handlers and tools Brief explanation With the split of the community repo in 150 separate repos users may have a hard time finding a particular monitor or know that a monitor or handler for a service already exists There should be a directory we can point them to that will offer this functionality in a clean manner The directory should be updated automatically upon the release of a new gem github tag or repo Consideration will need to be given for the ratelimiting that is inherent with Github Expected Results We would like a solid design and poc of the code and tools necessary to build and maintain the directory It need not be complete but substantial progress should have been made and it should be in a poc state with complete functionality Current technologies in consideration are Nodejs RoR vanilla js Why Work On This Not much has been done on this front yet so the student would in effect have free rein with the design as long as it meets the functional requirements and the code is clean modular and stable This would include the ability to design the layout pick the methods to gather the required data and select the best language and tools for the project Guidance is available on these topics as well as examples of the types of functionality and style we are looking for Knowledge prerequisite general understanding of web application design general knowledge of web site template engines any would be fine but the site currently uses JekyllLiquid good working knowledge of standard web languages such as html css js familiarity with MVC frameworks such as Django and Rails basic understanding of the necessary apis including Github TravisCI and RubyGems basic understanding of current infrastructure automation and tooling must believe in and understand treating infrastructure as code ephemeral data and why this is necessary in a cloud environment Skill Level mediumadvanced Mentor Matt Jones5 or Artem Chernikov6 Proposal Guidelines When submitting your proposal please give some examples of previously completed web applications or programs andor designs you are currently working on You should also include some sites or applications that your find inspiring and would like to incorporate into your design If you have no prior projects available then explain in detail how you would go about completing this task Previous web experience is not critical but would be helpful Task A tool to help user setup and configure basic monitoring for their system Brief explanation With the split of the community repo in 150 separate repos users may have a hard time finding a particular monitor or know that a monitor or handler for a service already exists It would be nice for a user to be able to query a db and get back a list of gems to install to monitor their system For example a user wants to setup baseline monitoring but has no idea what to install for gems They would type in baseline and get back a list of packages whose metadata matches baseline Expected Results We would like a solid design and poc of the code and tools necessary to build and maintain this It need not be complete but substantial progress should have been made and it should be in a poc state with complete functionality Current technologies in consideration are Nodejs and RoR Why Work On This Not much has been done on this front yet so the student would in effect have free rein with the design as long as it meets the functional requirements and the code is clean modular and stable This would include the ability to design the layout pick the methods to gather the required data and select the best language and tools for the project Guidance is available on these topics as well as examples of the types of functionality and style we are looking for Knowledge prerequisite general understanding of web application design general knowledge of web site template engines any would be fine but the site currently uses JekyllLiquid good working knowledge of standard web languages such as html css js familiarity with MVC frameworks such as Django and Rails basic understanding of the necessary apis including Github TravisCI and RubyGems basic understanding of current infrastructure automation and tooling must believe in and understand treating infrastructure as code ephemeral data and why this is necessary in a cloud environment Skill Level mediumadvanced Mentor Matt Jones5 or Artem Chernikov6 Proposal Guidelines When submitting your proposal please give some examples of previously completed web applications or programs andor designs you are currently working on You should also include some sites or applications that your find inspiring and would like to incorporate into your design If you have no prior projects available then explain in detail how you would go about completing this task Previous web experience is not critical but would very be helpful Task Expand monitors for a given product platform or api Brief explanation There are still lots of apis platforms and tools out there that have minimal or nonexistent monitoring The student with the guidance of the mentor can pick one or several of these to write monitors and handlers or gather metrics for At the outset a proper scope dependent upon the chosen type of monitoring to be implemented would be agreed upon by both the student and the mentor A partial list of topics include expanded monitoring of elasticsearch or other large scale data stores improvements upon existing monitoring for Windows Server and Windows applications platform specific monitors for BSD VMS etc monitors and integration with various hypervisors such as KVM QEMU or ESXi low level monitoring of the linux kernel using kernel probes monitoring of various environmental metrics found in a datacenter including battery performance chasis temperature and network latency monitoring of various scada fpga or other embedded systems Expected Results A set of completed stable and production grade monitors handlers etc that are within the scope agreed upon by the student and the mentor at the outset The emphsis will be on quality not quanity and all code will be written in Ruby following the Developer Guidelines8 for the sensu plugins Why Work On This Freedom to explore Pick a topic and figure out how it works is commonly used and fails then effectively code ways to detect or possibly correct these failures A well defined scope will be created with the student to prevent chasing edge cases feature creep and black holes You will get a feel for how infrastructure developers and system administrators tackle a monitoring problem and how an effective monitor is written from design to code through to testing and production use You will get a chance to own the problem and create a solution based upon your personal preferences while adhering to published Developer Guidelines Note Due to the nature of this task the scope will be carefully considered and may be evaluated at specific intervals taking into account the task goals and the students learning ability Knowledge prerequisite general Ruby knowledge or advanced knowledge of PerlPythonGoC general concepts of monitoring or willingness to rapidly learn them general understanding of how to define generate and handle exit codes and what they mean within a monitoring environment must believe in and understand treating infrastructure as code ephemeral data and why this is necessary in a cloud environment necessary domain specific knowledge of the selected topic or proven experience rapidly adapting to new technologies Skill Level beginneradvanced depends on chosen topic Mentor Matt Jones5 or Artem Chernikov6 Proposal Guidelines When submitting your proposal please pick one or more topics and explain why you want to work with them a simple scope for the project and any domain specific knowledge or skills you have to help you complete the task 1 httpsensupluginsgithubiodevelopmentgir 2 httpsgithubcomsensusensucommunityplugins 3 httpsgithubcomsensuplugins 4 httpsgithubcombbatsovrubystyleguide 5 httpsgithubcommattyjones 6 httpsgithubcomkalabiyau 7 httpsgithubcomsensusensupluginspec 8 httpsensupluginsgithubiodevelopmentguidelineshtml"},{"title":"Plugins","tags":["sensu","plugins","2.3","index"],"product":"Plugins","version":"2.3","location":"/plugins/2.3/","display_name":"Plugins 2.3: Plugins","content":" Overview The goal of the Sensu Plugins project is to provide a set of community driven high quality plugins handlers and other code to maximize the effective use of Sensu in various types of autoscaling and traditional environments Much of the code is written in Ruby and uses the sensuplugin framework some also depend on additional gems or packageseg mysql2 or libopenssldevel Some are shell scripts All languages are welcome but the preference is for pure Ruby when possible to ensure the broadest range of compatibility"},{"title":"Installation","product":"Plugins","version":"2.3","location":"/plugins/2.3/installation","display_name":"Plugins 2.3: Installation","content":" Gems Installing via gem is the preferred method if one exists Standard Installation gem install sensupluginsdiskchecks Secure Installation Add the public key if you havent already as a trusted certificate gem cert add curl Ls httpsrawgithubusercontentcomsensupluginssensupluginsgithubiomastercertssensupluginspem gem install sensupluginsdiskchecks P MediumSecurity You can also download the key from certs within each repository Note If the gem has an alpha tag then you will need to use the prerelease flag or the gem will not be found Bundle Add sensupluginsdiskchecks to your Gemfile and run bundle install or bundle update Chef Using the Sensu sensugem LWRP sensugem sensupluginsdiskchecks do version 001 end Using the Chef package resource gempackage sensupluginsdiskchecks do version 001 end Puppet Using the Puppet sensugem package provider package sensupluginsdiskchecks ensure 001 provider sensugem Ansible gem namesensupluginsdiskchecks version001 statepresent executableoptsensuembeddedbingem Usage In a proper gem environment plugins can be executed directly from the command line If you want to check the disk usage you could use the checkdiskusage plugin This will only work for ruby scripts Scripts in other langauges will still need to be called directly do to binstubs not being automatically created checkdiskusagerb w 80 c 90 Depending on ruby environment you may need to call ruby directly optsensuembeddedbinruby checkdiskusagerb w 80 c 90 For details check the header file of a given plugin"},{"title":"Reference","product":"Plugins","version":"2.3","location":"/plugins/2.3/reference","display_name":"Plugins 2.3: Reference","content":" What is a Sensu pluginwhatisasensuplugin The Sensu Plugin specificationthesensupluginspecification Where to find Sensu pluginswheretofindsensuplugins The Sensu Plugins projectthesensupluginsproject Featured Sensu Pluginsfeaturedsensuplugins Nagios plugins and the Nagios exchangenagiospluginsandthenagiosexchange Write you own custom pluginswriteyourowncustomplugins Plugin executionpluginexecution How and where are plugins executedhowandwherearemutatorcommandsexecuted What programming languages are supportedwhatprogramminglanguagesaresupported What is Sensus EMBEDDEDRUBYwhatissensusembeddedruby Installing Sensu Pluginsinstallingsensuplugins Use sensuinstall to install Sensu Pluginsusesensuinstalltoinstallsensuplugins Alternative installation methodsalternativeinstallationmethods The Sensu Plugin gemthesensuplugingem What is the sensuplugin gemwhatisthesensuplugingem Plugin configurationpluginconfiguration Example check plugin definitionexamplecheckplugindefinition Sensu plugin definition specificationsensuplugindefinitionspecification What is a Sensu plugin Sensu plugins provide executable scripts or other programs that can be used as Sensu checks1 ie to monitor server resources services and application health or collect analyze metrics Sensu handlers2 ie to send notifications or perform other actions based on Sensu events3 or Sensu mutators3 ie to modify event data4 prior to handling The Sensu Plugin specification Sensu Plugins provide executable scripts or other programs that can be used as a Sensu check command5 pipe handler command6 or mutator command7 Sensu plugins must comply with a simple specification Accept inputdata via STDIN handler and mutator plugins only Optionally able to parse a JSON data payload ie event data4 Output data to STDOUT or STDERR Produce an exit status code to indicate state 0 indicates OK 1 indicates WARNING 2 indicates CRITICAL exit status codes other than 0 1 or 2 indicate an unknown or custom status Optionally able to parse command line arguments to modify plugin behavior PRO TIP Those familiar with the Nagios14 monitoring system may recognize this specification as it is the same one used by Nagios plugins As a result Nagios plugins can be used with Sensu15 without any modification Where to find Sensu Plugins The Sensu Plugins project The Sensu Plugins project8 is a communitypowered open source software project9 that is organized by members of the Sensu community in collaboration with the Sensu development team The Sensu Plugins project currently maintains hundreds of plugins providing various checks handlers and mutators which are used by thousands of organizations around the world Most of the plugins maintained by the Sensu Plugins project are Rubybased plugins which are distributed via Rubygemsorg10 and installable via sensuinstall11 Featured Sensu Plugins To help new users discover some of the most popular plugins for instrumenting their infrastructure and integrating Sensu with popular tools and services a featured plugins page12 is provided on the Sensu website These featured plugins are the same plugins developed and maintained by the Sensu plugins project13 Nagios plugins and the Nagios Exchange As previously mentioned the Sensu Plugin specification16 is 100 compatible with the Nagios plugin specification17 as a result Nagios plugins may be used with Sensu without any modification Sensu allows you to bring new life to the 50 plugins in the official Nagios Plugins project18 which began life in 199919 making it a very mature source for monitoring plugins and over 4000 plugins available in the Nagios Exchange20 Write your own custom plugins With a simple specification16 which makes it possible to write Sensu plugins in almost any programming language21 its very easy to write your own custom plugins for Sensu Example plugins The following example demonstrates how to write a very basic Sensu Plugin in the Ruby programming language usrbinenv ruby A simple example handler plugin require json Read the incoming JSON data from STDIN event JSONparseSTDINread symbolizenames true Create an output object using Ruby string interpolation output The check named eventcheckname generated the following output eventoutput Convert the mutated event data back to JSON and output it to STDOUT puts output NOTE this example doesnt provide much in terms of functionality it would simply be logged to the Sensu server23 log file but it does provide a starting point for a simple custom plugin Plugin execution How and where are plugins executed As mentioned elsewhere in the documentation see check commands5 pipe handler commands6 and mutator commands7 all plugins are executed by a Sensu client24 or Sensu server23 as the sensu user Plugins must be executable files that are discoverable on the Sensu system ie installed in a system PATH directory or they must be referenced with an absolute path eg optpathtomyplugin NOTE By default the Sensu installer packages will modify the system PATH for the Sensu processes to include etcsensuplugins As a result executable scripts eg plugins located in etcsensuplugins will be valid commands This allows command attributes to use relative paths for Sensu plugin commandseg command checkhttprb u httpssensuapporg What programming languages are supported Any programming language that can satisfy the Sensu plugin specification16 requirements ndash which is nearly any programming language in the world ndash can be used to write Sensu plugins One of the primary advantages of writing Sensu plugins in the Ruby programming language is that Sensu itself is written in Ruby and all Sensu installer packages provide an embedded Ruby25 eliminating the need to install or depend on a separate runtime NOTE plugins written in programming languages other than Ruby will require the corresponding runtime to be installed in order for the plugin to run What is Sensus EMBEDDEDRUBY All Sensu Core installer packages provide an embedded Ruby runtime ie even if a system Ruby is installed Sensu will run on its own Ruby This vendored Ruby runtime can be accessed by Rubybased plugins by setting Sensus EMBEDDEDRUBY configuration variable26 to true NOTE in Sensu versions 0210 all initservice scripts provided by the Sensu Core installer packages are setting Sensus EMBEDDEDRUBY environment variable to true making the use of Sensus embedded Ruby the default behavior in modern Sensu releases Installing Sensu Plugins Use sensuinstall to install Sensu Plugins The Sensu Core package provides a tool called sensuinstall a simple wrapper around the Ruby gem utility The Sensu Install tool sensuinstall simplifies installation of Rubybased plugins The sensuinstall tool can be run with one or more arguments that determine the actions to take sensuinstall h Usage sensuinstall options h help Display this message v verbose Enable verbose logging p plugin PLUGIN Install a Sensu PLUGIN P plugins PLUGINPLUGIN PLUGIN or commadelimited list of Sensu plugins to install e extension EXTENSION Install a Sensu EXTENSION E extensions EXTENSIONEXT EXTENSION or commadelimited list of Sensu extensions to install s source SOURCE Install Sensu plugins and extensions from a custom SOURCE c clean Clean up remove other installed versions of the plugins andor extensions x proxy PROXY Install Sensu plugins and extensions via a PROXY URL NOTE sensuinstall is only available in Sensu Core 0210 EXAMPLE sensuinstallexample The following instructions will install the Sensu HTTP plugin22 using the sensuinstall utility sudo sensuinstall p nginx SENSUINSTALL installing Sensu plugins SENSUINSTALL determining if Sensu plugin gem sensupluginsnginx is already installed false SENSUINSTALL Sensu plugin gems to be installed sensupluginsnginx SENSUINSTALL installing Sensu plugin gem sensupluginsnginx Fetching sensupluginsnginx100gem 100 You can use the embedded Ruby by setting EMBEDDEDRUBYtrue in etcdefaultsensu Successfully installed sensupluginsnginx100 1 gem installed SENSUINSTALL successfully installed Sensu plugins nginx To install a specific version of a plugin simply provide a version number after the plugin name separated by a colon for example sudo sensuinstall p nginx006 SENSUINSTALL installing Sensu plugins SENSUINSTALL determining if Sensu plugin gem sensupluginsnginx006 is already installed false SENSUINSTALL Sensu plugin gems to be installed sensupluginsnginx006 SENSUINSTALL installing Sensu plugin gem sensupluginsnginx006 Fetching mixlibcli150gem 100 Successfully installed mixlibcli150 Fetching sensuplugin120gem 100 Successfully installed sensuplugin120 Fetching sensupluginsnginx006gem 100 You can use the embedded Ruby by setting EMBEDDEDRUBYtrue in etcdefaultsensu Successfully installed sensupluginsnginx006 3 gems installed SENSUINSTALL successfully installed Sensu plugins nginx006 NOTE as shown in the examples above the sensuinstall utility will show the output of any gems including gem dependencies installed using sensuinstall Alternative installation methods Coming soon The Sensu Plugin gem What is the sensuplugin gem Although Sensu Plugins may be written in any programming language21 there are certain advantages of writing plugins in Ruby From an operations perspective Rubybased plugins are convenient because they are able to run on Sensus embedded Ruby25 Rubybased plugins also benefit from the sensuplugin gem27 mdash a Ruby library that provides some builtin functionality and a number of helper classes and that simplify custom plugin development Much of the builtin functionality provided by the sensuplugin gem depends on custom client check andor handler definition attributes as documented below Plugin configuration Example check plugin definition The following is an example Sensu check definition29 that uses the checkhttprb script provided by the Sensu HTTP Plugin22 and a custom check definition attribute28 called refresh Although the refresh attribute itself is not directly supported by Sensu the sensuplugin gem does provide builtin support for reducing alert fatigue via the SensuPluginHandler class ie only handling events on the first occurrence and again every N occurrences where N refresh checks apihealth command checkhttprb u httpsapiexamplecomhealth standalone true interval 60 refresh 60 Sensu plugin definition specification NOTE plugins based on the sensuplugin gem derive configuration from custom check definition attributes28 The configuration examples provided above and the specification provided here are for clarification and convenience only ie this specification is just an extension of the check definition specification29 and not a definition of a distinct Sensu primitive Check definition attributes occurrences "},{"title":"Release Process","product":"Plugins","version":"2.3","location":"/plugins/2.3/release_process","display_name":"Plugins 2.3: Release Process","content":"Currently we use Travishttpstravisciorg is used to run tests across all forks and deploying the gems When a Pull Request is submitted Travis will automatically execute all default tasks defined in the Rakefile found in the repo root and display the results in the PR When a committer wishes to deploy a new release the following procedure should be followed 1 Update CHANGELOG to reflect all of the changes that has happened between last release and now The Unreleased link in the CHANGELOG gives you a nice diff 1 make sure the README is updated as neccessary 1 Update the version using semver2httpsemverorgspecv200html 1 make a git release Example with hub hub release create majorminorpatch 1 Make sure the gem is actually uploaded to rubygems Its rare but Ive seen times when it doesnt upload for whatever reason 1 travis will only deploy if the build is passing so make sure master is building before cutting a release All tag commits that pass tests in all supported runtimes will kick a deploy to Rubygems"},{"title":"Roadmap","product":"Plugins","version":"2.3","location":"/plugins/2.3/roadmap","display_name":"Plugins 2.3: Roadmap","content":" Overview There are big plans in store for the sensuplugins Not just in terms of code but in terms of community involvement and scope Some of these are fairly far off some are nearing completion Community Involvement Umbrella Org Sensu itself is a framework and the plugins are just one piece of it Many of the companies that use Sensu have created custom workflows checks and handlers then open sourced them These could solve another users problem but if the user doesnt know about them it wont do them any good The thought here is to have a central location where other companies and individuals can list their code for all to use There would be few conditions surrounding this and it will give people a chance to see how others have implemented or modified existing solutions These companies wouldnt have to go through the PR process as they would be considered unoffical externally maintained projects and they would retain full control of the code yet be able to share it and get greater feedback There are are lot of things to still work out and think about but its on the table Planned Features Arch Independent Code One of the big pushes will be for arch independent code A short coming of other major monitoring solutions is the lack of real platform independence This is a high priority and is something that is always in consideration Many of the disk and process checks have already been refactored to achieve this and more are in progress There will always be platform dependent checks such as linux kernel monitors or Windows event monitors but the more the number of these that can be reduced the better Wider Platform Testing Due to constraints with Travis we are only able to run automated tests against OSX109 and Ubuntu LTS We are working on a workflow that will allow use to run automated tests against multiple OSs and platforms including OSX108 OSX109 OSX1010 FreeBSD latest LTS and N1 Ubuntu latest LTS and N1 RHELCentOs 5x RHELCentOs 6x RHELCentOs 7x Debian latest stable and N1 Suse latest stable and N1 Solaris maybe Windows 2k8 Windows 2k12 Due to the scope of this and the resources necessary it will be a long time coming but talks around this are slowly becoming action Official BSD Support Ruby is just ruby is should not matter the platform With that being said support for sensuplugins on FreeBSD92 and 101 is coming shortly Several of the repo have Vagrantboxes for these platforms so one could test functionality on their own before installing the gem in their environment Website Plugin Directory With the split of the community repo in 150 separate repos users may have a hard time finding a particular monitor or know that a monitor or handler for a service already exists There should be a directory we can point them to that will offer this functionality in a clean manner The directory should be updated automatically upon the release of a new gem github tag or repo Consideration will need to be given for the ratelimiting that is inherent with Github There is still a lot of talk going on around this but Travis GH hooks and sinatra and fairly high on the tool list Configuration Mgmt Tool With the split of the community repo in 150 separate repos users may have a hard time finding a particular monitor or know that a monitor or handler for a service already exists It would be nice for a user to be able to query a db and get back a list of gems to install to monitor their system For example a user wants to setup baseline monitoring but has no idea what to install for gems They would type in baseline and get back a list of packages whose metadata matches baseline There is still a lot of talk going on around this but Travis GH hooks and sinatra and fairly high on the tool list I mattyjones would love to use golang for this and the directory but that may be extreme overkill Note I personally mattjones hate gui configuration management tools and this almost falls in the realm of it but if done properly and effectively it could avoid becoming a beast of burden that needs to be put to sleep I leave it up to the community to figure out what they want I just know there has to be a better way Help Wanted Grab a repo and come play If you have another thought on something related then by all means reach out to someone on the team Until then much monitoringlove sensuplugins admins"},{"title":"Testing","product":"Plugins","version":"2.3","location":"/plugins/2.3/testing","display_name":"Plugins 2.3: Testing","content":" Linting Only pull requests passing Rubocop will be merged Rubocop is used to lint the ruby plugins This is done to standardize the style used within these plugins and ensure high quality code Most current rules6 are in effect No linting is done on Ruby code prior to version 2x Ruby 192 and 187 support has been dropped the plugins may still function with these versions but no tests will be run against them nor will code such as hashes be specifically written or enforced to ensure backwards compatibility Rubocop compliance can be checked by installing the gem and running rubocop with the repo Running rubocop a will attempt to autocorrect any issues saving considerable time in large files If it truly makes sense for code to violate a rule disable that rule within the code by either using rubocopdisable at the end of the line in violation or rubocopdisable rubocopenable If either of these methods are used please mention in the PR as this should be kept to an absolute minimum at times this can be necessary though especially concerning method length and complexity Rspec Currently RSpec3 is the test framework9 of choice Please add coverage for your check Checks will not be considered production grade and stable until they have coverage Tests are not required though to submit a check merely encouraged for the benefit of all You can run all tests locally using rake default to run all specs and rubocop tests RSpec tests are currently run against 20 and 21 There are currently no plans to support 18x or test against 192 and 193 This is little bit hard almost impossible for nonruby checks Let someone from the team10 know and maybe can can help Codeship Testing Pipeline This pipeline is run upon any commits to the master branch including Pull Request merge commits Due to limitations with Codeship tests are not run across forks and the build logs are not publicly available jut the build status If you wish to work on the build pipeline please speak to a team member about necessary access Setup Deploy the needed keys cd tmp git clone depth 1 gitgithubcomsensupluginstomservogit cd tomservo rake setupsetupenv cd clone Setup the desired Ruby environments Ruby 193 rvm use 193 install gem install bundler bundle install Ruby 20 rvm use 20 install gem install bundler bundle install Ruby 21 rvm use 21 install gem install bundler bundle install Ruby 22 rvm use 22 install gem install bundler bundle install Test Commands Ruby 193 rvm use 193 bundle exec rake default gem build gemspec gem install gem Ruby 20 rvm use 20 bundle exec rake default gem build gemspec gem install gem Ruby 21 rvm use 21 bundle exec rake default gem build gemspec gem install gem Ruby 22 rvm use 22 bundle exec rake default gem build gemspec gem install gem For each supported Ruby version we ensure the following are met Rubocop passes Yardocs build RSpec tests pass Ensure all plugins in bin are executable The gem is built without errors The gem can be installed without errors Currently this is only automated to run in Ubuntu Many repos are run tested manually against CentOS and FreeBSD as well Currently we dont have an automated way to test against them but that is forthcoming Travis Test Pipeline This pipeline is run against every commit to a repo including commits across forks and deployment commits by Tom Servo language ruby cache bundler install bundle install rvm 193 20 21 22 notifications email recipients sensupluginsensupluginsio onsuccess change onfailure always script bundle exec rake default For each supported Ruby version we ensure the following are met Rubocop passes Yardocs build RSpec tests pass Ensure all plugins in bin are executable 6 httpsgithubcomsensupluginsGIRblobmasterfilestemplatesgemrubocopymlerb 7 httpsgithubcomsensupluginsGIRblobmasterfilestemplatesgemtravisymlerb 8 httpsgithubcomsensupluginsGIRblobmasterfilestemplatesgemRakefileerb 9 httpsgithubcomsensusensupluginspec 10 httpsgithubcomorgssensupluginspeople"},{"title":"Tom Servo","product":"Plugins","version":"2.3","location":"/plugins/2.3/tom_servo","display_name":"Plugins 2.3: Tom Servo","content":"Tom ServohttpsgithubcomsensupluginstomservoblobmasterREADMEmd is our testing and deployment tool His job is top make our lives easy All deployment scripts code and tooling will be handled by him"},{"title":"What's new?","product":"Plugins","version":"latest","location":"/plugins/","display_name":"Plugins latest: What's new?","content":""},{"title":"Features","product":"Sensu Core","version":"0.29","location":"/sensu-core/0.29/features","display_name":"Sensu Core 0.29: Features","content":" This is a test page"},{"title":"Getting Started","product":"Sensu Core","version":"0.29","location":"/sensu-core/0.29/getting-started","display_name":"Sensu Core 0.29: Getting Started","content":" This is a test page"},{"title":"What's new?","tags":["sensu","sensu core","core","0.29","index","versions","ipsum","bunny"],"product":"Sensu Core","version":"0.29","location":"/sensu-core/0.29/","display_name":"Sensu Core 0.29: What's new?","content":" This is a test page This is an older version of Sensu Key Features Heres some key features For a full list visit the Featuressensu029features page Does this neat thing Does another alright thing Its pretty good Some Ipsum Lorem ipsum dolor sit amet consectetur adipiscing elit Morbi in mi lorem Cras ut congue dui Nullam non lobortis erat Nunc vel magna ex Duis congue tellus vel egestas accumsan Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas Phasellus eget odio semper lacus luctus feugiat id vel odio Cras eget nulla commodo ornare nisi in faucibus tortor Pellentesque ultrices hendrerit aliquam Praesent ac scelerisque velit Aliquam elementum dolor sit amet commodo molestie In iaculis pulvinar varius Pellentesque blandit fringilla fringilla Suspendisse eu massa ligula Vestibulum massa mi fermentum ut neque ultricies ullamcorper efficitur magna Phasellus dictum auctor augue ac sagittis nunc pharetra ut Nullam volutpat bibendum tellus in egestas sem malesuada eget Morbi aliquet facilisis massa eget aliquet Etiam sed nunc in velit posuere semper Nunc eget nulla lectus Nullam scelerisque ligula arcu vel placerat mauris eleifend a Orci varius natoque penatibus et magnis dis parturient montes nascetur ridiculus mus Vivamus sem mi feugiat vel porta quis faucibus ac eros Aenean sit amet consectetur justo Nunc sed justo eu quam sollicitudin pellentesque Praesent tristique dolor rhoncus ultrices vehicula Vivamus nec dolor felis Fusce laoreet diam ut tempus efficitur leo tortor vestibulum justo at tempus augue felis id tellus Duis viverra placerat erat sit amet molestie velit vulputate id Donec a ex varius vestibulum lectus porttitor convallis dolor Nam quam tortor mollis eu neque a pharetra porta dolor In auctor mauris in lacinia laoreet lectus eros varius metus id aliquet lectus arcu nec tortor Maecenas sagittis faucibus arcu ut viverra Aliquam vitae libero sem Vivamus quis velit at mi viverra venenatis Quisque augue tellus tristique ac placerat id interdum sed augue Integer a feugiat justo Mauris gravida risus convallis enim lacinia eu facilisis purus tristique Nulla eu dapibus orci eu maximus erat Vivamus sit amet luctus ex Mauris eget tellus laoreet vulputate lectus vel interdum nunc Quisque tristique venenatis elit et pretium Suspendisse diam ante dapibus eu ullamcorper sed elementum ac est Vestibulum convallis sem metus in facilisis ex imperdiet et Nam consectetur iaculis mauris Ut sollicitudin turpis quam non pretium ex finibus a In purus augue vestibulum rutrum dui sed tincidunt lacinia lorem Curabitur finibus venenatis leo ut sollicitudin dolor bibendum eget Donec ac sem ut dui sollicitudin egestas Vivamus bibendum arcu ac elementum consequat Fusce quis felis ac elit placerat fermentum quis at tellus"},{"title":"Sensu Aggregates API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/aggregates","display_name":"Sensu Core 1.0: Sensu Aggregates API","content":" Reference documentation The aggregates API endpointtheaggregatesapiendpoint aggregates GETaggregatesget The aggregatesname API endpointstheaggregatesnameapiendpoints aggregatesname GETaggregatesnameget aggregatesname DELETEaggregatesnamedelete The aggregatesnameclients API endpointtheaggregatesnameclientsapiendpoint aggregatesnameclients GETaggregatesnameclientsget The aggregatesnamechecks API endpointtheaggregatesnamechecksapiendpoint aggregatesnamechecks GETaggregatesnamechecksget The aggregatesnameresultsseverity API endpointtheaggregatesnameresultsseverityapiendpoint aggregatesnameresultsseverity GETaggregatesnameresultsseverityget The aggregates API endpoint theaggregatesapiendpoint The aggregates API endpoint provides HTTP GET access to named aggregate data1 aggregates GET EXAMPLES aggregatesgetexamples The following example demonstrates a aggregates API query which results in a JSON Array of JSON Hashes containing named check aggregates1 curl s httplocalhost4567aggregates jq name checkhttp name checkwebapp name elasticsearchhealth API specification aggregatesgetspecification aggregates GET "},{"title":"Checks API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/checks","display_name":"Sensu Core 1.0: Checks API","content":" Reference documentation The checks API endpointthechecksapiendpoint checks GETchecksget The checkscheck API endpointsthecheckscheckapiendpoints checkscheck GETcheckscheckget The request API endpointtherequestapiendpoint request POSTrequestpost The checks API endpoint checks GET The checks API endpoint provides HTTP GET access to subscription check1 data EXAMPLE checksgetexample The following example demonstrates a request to the checks API resulting in a JSON Array of JSON Hashes containing subscription check definitions2 curl s http1270014567checks jq name sensuwebsite interval 60 subscribers production command checkhttprb u httpssensuapporg API Specification checksgetspecification checks GET "},{"title":"Clients API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/clients","display_name":"Sensu Core 1.0: Clients API","content":" Reference documentation The clients API endpointtheclientsapiendpoint clients GETclientsget clients POSTclientspost The clientsclient API endpointstheclientsclientapiendpoints clientsclient GETclientsclientget clientsclient DELETEclientsclientdelete The clientsclienthistory API endpointstheclientsclienthistoryapiendpoints"},{"title":"API Configuration","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/configuration","display_name":"Sensu Core 1.0: API Configuration","content":" Reference documentation API configurationapiconfiguration Example API definitionexampleapidefinition API definition specificationapidefinitionspecification API configuration Example API definition The following is an example API definition at etcsensuconfdapijson api host 57435322 bind 0000 port 4567 API definition specification The API definition uses the api definition scope api attributes host "},{"title":"Events API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/events","display_name":"Sensu Core 1.0: Events API","content":" Reference documentation The events API endpointtheeventsapiendpoint events GETeventsget The eventsclient API endpointtheeventsclientapiendpoint eventsclient GETeventsclientget The eventsclientcheck API endpointstheeventsclientcheckapiendpoints eventsclientcheck GETeventsclientcheckget eventsclientcheck DELETEeventsclientcheckdelete The resolve API endpointtheresolveapiendpoint resolve POSTresolvepost The events API endpoint events GET The events API endpoint provide HTTP GET access to the Sensu event registry EXAMPLES eventsgetexamples The following example demonstrates a events API query which returns a JSON Array of JSON Hashes containing event data1 curl s httplocalhost4567events jq timestamp 1460303502 action create occurrences 1 check totalstatechange 14 history 0 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 1 status 1 output CheckHttp WARNING 301n command checkhttprb u websitehttpsensuapporg subscribers production interval 60 handler mail name sensuwebsite issued 1460303502 executed 1460303502 duration 0032 client timestamp 1460303501 version 100 website httpgooglecom socket port 3030 bind 127001 subscriptions production environment development address 127001 name client01 id 0f42ec9412bf4918a0b952fd57e8ee96 API specification eventsgetspecification events GET "},{"title":"Health & Info APIs","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/health-and-info","display_name":"Sensu Core 1.0: Health & Info APIs","content":" Reference documentation How to obtain API status informationhowtoobtainapistatusinformation The health API endpointthehealthapiendpoint health GEThealthget The info API endpointtheinfoapiendpoint info GETinfoget How to obtain API status information The Sensu API provides two distinct endpoints for obtaining API status information health and info The Health API provides status information about the health of the APIs connections to the Sensu data store1 and transport2 The Info API provides a report on the status of the API including API version the status of the APIs connections to the Sensu data store and transport and the number of messages and consumers in various transport queues The health API endpoint health GET The health API provides HTTP GET access to test or verify the health of the monitoring system The Health API is provided for monitoring Sensu mdash it facilitates service checks to ensure that a minimal number of Sensu servers3 are connected to the transport ie transport consumers andor to ensure that the transport queue isnt growing which would indicate that the Sensu servers arent able to keeping up with the volume of keepalive messages4 and check results5 being produced NOTE the health API obtains its information via the info API PRO TIP the Health API messages URL parameter6 eg healthmessages1000 can be used to monitor the number of messages queued on the Sensu transport2 and then leveraged by other automation tools to trigger an auto scaling or similar provisioning event to automatically add one or more Sensu servers to a Sensu installation EXAMPLE healthgetexample In the following example querying the health API with the consumers6 URL parameter will return an HTTP response code7 to indicate if the expected number of consumers ie Sensu servers3 are processing check results In this example we are expecting at least two 2 consumers to be running at all times ie at least two Sensu servers processing check results The 412 Precondition Failed HTTP response code7 indicates that the requested number of consumers are not registered curl s i http1270014567healthconsumers2 HTTP11 412 Precondition Failed AccessControlAllowOrigin AccessControlAllowMethods GET POST PUT DELETE OPTIONS AccessControlAllowCredentials true AccessControlAllowHeaders Origin XRequestedWith ContentType Accept Authorization Connection close NOTE the 412 Precondition Failed HTTP response code7 does not mean that the API itself is unavailable but rather it is the equivalent of a false response to the API query ie if you want to know if there are at least two Sensu servers processing check results a 412 response code would mean no WARNING transport consumers are a native concept in pubsub technology8 including actual message queues like RabbitMQ8 Because the Sensu transport library2 supports transports which are not actual message queues eg Redis10 some transports do not support the Health API consumers check because they dont support the concept of consumers ie this means that healthconsumers1 will always fail returning a 412 response code for Sensu installations using Redis as the transport regardless of the number of Sensu servers which may be registered and processing check results API Specification healthgetspecification health GET "},{"title":"API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/","display_name":"Sensu Core 1.0: API","content":""},{"title":"Sensu API Overview","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/overview","display_name":"Sensu Core 1.0: Sensu API Overview","content":" Sensu API The Sensu API provides access to monitoring data collected by Sensu such as a client registry1 check results2 and event data3 The API can be used to request adhoc check executions and resolve events among other things RESTful JSON API The Sensu API is JSON4based RESTful API5 Familiarity with or willingness to Google industry standard RESTful API behaviors ndash including HTTP response codes6 ndash are strongly recommended Reference documentation Clients APIclients Checks APIchecks Results APIresults Aggregates APIaggregates Events APIevents Stashes APIstashes Health Info APIhealthandinfo Settings APIsettings API configurationconfiguration Response Content Filtering Sensu API endpoints that support the GET HTTP method support HTTP response content filtering using one or more filter attributes To use response content filtering construct the URL for your API request using a dot notation query string parameter beginning with filter eg eventsfilterclientenvironmentproduction The Sensu API will only return response content objects that match the specified response content filter attributes Multiple attributes may be specified for a request eg eventsfilterclientenvironmentproductionfiltercheckcontactops 1 referenceclientsregistrationandregistry 2 referencecheckscheckresults 3 referenceeventseventdata 4 httpwwwjsonorg 5 httpsenwikipediaorgwikiRepresentationalstatetransfer 6 httpsenwikipediaorgwikiListofHTTPstatuscodes"},{"title":"Sensu Results API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/results","display_name":"Sensu Core 1.0: Sensu Results API","content":" Reference documentation The results API endpointtheresultsapiendpoint results GETresultsget results POSTresultspost The resultsclient API endpointtheresultsclientapiendpoint resultsclient GETresultsclientget The resultsclientcheck API endpointstheresultsclientcheckapiendpoints resultsclientcheck GETresultsclientcheckget resultsclientcheck DELETEresultsclientcheckdelete The results API endpoint theresultsapiendpoint The results API endpoint provides HTTP GET and HTTP POST access to current check result data1 results GET The results API endpoint provides HTTP GET access to fetch current check result data1 EXAMPLES resultsgetexamples The following example demonstrates a results API query which returns a JSON Array of JSON Hashes containing check results1 curl s httplocalhost4567results jq check status 1 output CheckHttp WARNING 301n command checkhttprb u websitehttpsensuapporg subscribers production interval 60 handler mail name sensuwebsite issued 1460312322 executed 1460312322 duration 0032 client client01 check status 0 output Keepalive sent from client 2 seconds ago executed 1460312365 issued 1460312365 name keepalive thresholds critical 180 warning 120 client client01 API specification resultsgetspecification results GET "},{"title":"Sensu Settings API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/settings","display_name":"Sensu Core 1.0: Sensu Settings API","content":" Reference documentation The settings API endpointthesettingsendpoint settings GETsettingsget The settings API endpoint thesettingsendpoint settings GET The settings API provides HTTP GET access to the APIs running configuration settings Sensitive setting values are redacted by default unless the URL query parameter redacted is set to false eg settingsredactedfalse EXAMPLE settingsgetexample The following example demonstrates a request to the settings API resulting in a JSON Hash containing the APIs running configuration settings curl s http1270014567settings jq api cors Headers Origin XRequestedWith ContentType Accept Authorization Credentials true Methods GET POST PUT DELETE OPTIONS Origin password REDACTED user admin checks API Specification settingsgetspecification settings GET "},{"title":"Sensu Silenced API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/silenced","display_name":"Sensu Core 1.0: Sensu Silenced API","content":" Reference documentation The silenced API endpointsthesilencedapiendpoints silenced GETsilencedget silenced POSTsilencedpost silencedidsid GETsilencedidsidget silencedclear POSTsilencedclearpost silencedsubscriptionssubscription GETsilencedsubscriptionsget silencedcheckscheck GETsilencedchecksget The silenced API endpoints The Silence API provides endpoint HTTP POST and GET access to create query and clear delete a silence entry via the Sensu API silenced GET Example Querying for all silence entries curl s X GET httplocalhost4567silenced jq expire 3530 expireonresolve false creator null reason null check checkhaproxy subscription loadbalancer id loadbalancercheckhaproxy expire 1 expireonresolve true creator sysopexamplecom reason we ran out of time check checkntpd subscription all id allcheckntpd API specification silencedgetspecification silenced GET "},{"title":"Sensu Stashes API","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/api/stashes","display_name":"Sensu Core 1.0: Sensu Stashes API","content":" Reference documentation The stashes API endpointsthestashesapiendpoints stashes GETstashesget stashes POSTstashespost The stashespath API endpointsthestashespathapiendpoints stashespath GETstashespathget stashespath POSTstashespathpost stashespath DELETEstashespathdelete The stashes API endpoints The stashes API endpoint provides HTTP GET and HTTP POST access to Sensu stash data3 via the Sensu keyvalue store4 stashes GET EXAMPLES stashesgetexamples The following example demonstrates a stashes query which results in a JSON Array of JSON Hashes containing stash data3 curl s httplocalhost4567stashes jq path silencei424242chefclientprocess content timestamp 1383441836 expire 3600 path applicationstorefront content timestamp 1381350802 endpoints httpshostnamestore expire 1 API specification stashesgetspecification stashes GET "},{"title":"Client Installation","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/client-installation","display_name":"Sensu Core 1.0: Client Installation","content":" Install the Sensu Client Having successfully installed and configured a Sensu server and API Sensu Core or Sensu Enterprise lets now install andor configure a Sensu client The Sensu client is run on every system you need to monitor including those running the Sensu server and API and Sensus dependencies ie RabbitMQ andor Redis Both Sensu Core and Sensu Enterprise use the same Sensu client process ie sensuclient so upgrading from Sensu Core to Sensu Enterprise does not require you to install a difference Sensu client Included in Sensu Core The Sensu client process sensuclient is part of the open source Sensu project ie Sensu Core and it is included in the Sensu Core installer packages along with the Sensu Core server and API processes ie sensuserver and sensuapi This means that if you are following the instructions in this guide for a standalone1 installation your Sensu client is already installed Disabled by default The Sensu client process sensuclient is disabled by default on all platforms Please refer to the corresponding configuration and operation documentation corresponding to the platform where you have installed your Sensu clients for instructions on starting stopping the Sensu client process andor enabling the Sensu client process to start automatically on system boot Install Sensu Core sensucore UbuntuDebian Sensu Core is installed on Ubuntu and Debian systems via a native system installer package ie a deb file which is available for download from the Sensu Downloads1 page and from APT package management repositories The Sensu Core package installs several processes including sensuserver sensuapi and sensuclient Sensu packages for Debian target current stable and oldstable releases15 Sensu packages for Ubuntu target current Long Term Support LTS releases16 If you wish to install Sensu packages on newer Debian or Ubuntu releases please try installing a package built for the most recent Debian stable or Ubuntu LTS release Install Sensu using APT recommended installsensucorerepository NOTE As of Sensu version 027 apt repository configuration has changed to include the codename of the UbuntuDebian release To install or upgrade to the latest version of Sensu please ensure you have updated existing repository configurations 1 Install the GPG public key wget q httpssensuglobalsslfastlynetaptpubkeygpg O sudo aptkey add 2 Determine the codename of the UbuntuDebian release on your system etcosrelease echo VERSION 14044 LTS Trusty Tahr codename for this system is trusty 3 Create an APT configuration file at etcaptsourceslistdsensulist export CODENAMEyourreleasecodenamehere eg trusty echo deb httpssensuglobalsslfastlynetapt CODENAME main sudo tee etcaptsourceslistdsensulist 4 Update APT sudo aptget update 5 Install Sensu sudo aptget install sensu NOTE as mentioned above the sensu package installs all of the Sensu Core processes including sensuclient sensuserver and sensuapi 6 Configure Sensu No default configuration is provided with Sensu so none of the Sensu processes will run without the corresponding configuration Please refer to the Configure Sensu section11 below for more information on configuring Sensu At minimum all of the Sensu processes will need a working transport definition12 The Sensu client will need a client definition13 and both the sensuserver and sensuapi will need a datastore Redis definition14 mdash all of which are explained below RHELCentOS Sensu Core is installed on RHEL and CentOS systems via a native system installer package ie a rpm file which is available for download from the Sensu Downloads1 page and from YUM package management repositories The Sensu Core package installs several processes including sensuserver sensuapi and sensuclient Install Sensu using YUM recommended installsensucorerepository Sensu packages for Red Hat target currently supported versions of Red Hat Enterprise Linux and their Centos equivalents These packages are generally expected to be compatible with Red Hat derivatives like SuSE Amazon or Scientific Linux but packages are not tested on these platforms The following instructions describe configuring package repository definitions using Yum variables14 as components of the baseurl On Red Hat derivative platforms the value of the releasever variable will not typically align with the RHEL release versions eg 6 or 7 advertised in the Sensu Yum repository Please use 6 or 7 in lieu of releasever on RHEL derivatives depending on whether they use sysv init or systemd respectively NOTE As of Sensu version 027 the yum repository URL has changed to include the releasever variable To install or upgrade to the latest version of Sensu please ensure you have updated existing repository configurations 1 Create the YUM repository configuration file for the Sensu Core repository at etcyumreposdsensurepo echo sensu namesensu baseurlhttpssensuglobalsslfastlynetyumreleaseverbasearch gpgcheck0 enabled1 sudo tee etcyumreposdsensurepo 2 Install Sensu sudo yum install sensu NOTE as mentioned above the sensu package installs all of the Sensu Core processes including sensuclient sensuserver and sensuapi 3 Configure Sensu No default configuration is provided with Sensu so none of the Sensu processes will run without the corresponding configuration Please refer to the Configure Sensu section10 below for more information on configuring Sensu At minimum all of the Sensu processes will need a working transport definition11 The Sensu client will need a client definition12 and both the sensuserver and sensuapi will need a datastore Redis definition13 mdash all of which are explained below "},{"title":"Sensu Core","tags":["sensu","core","sensu core","1.0","frog","index"],"product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/","display_name":"Sensu Core 1.0: Sensu Core","content":" Overview Monitor servers services application health and business KPIs Collect and analyze custom metrics Get notified about failures before your users do Give your business the competitive advantage it deserves"},{"title":"Aggregates","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/aggregates","display_name":"Sensu Core 1.0: Aggregates","content":" Reference documentation What is a Sensu named aggregatewhatisacheckaggregate When should named aggregates be usedwhenshouldcheckaggregatesbeused How do named aggregates workhowdocheckaggregateswork Example aggregated check resultexampleaggregatedcheckresult Aggregate configurationaggregateconfiguration Example aggregate definitionexampleaggregatedefinition Aggregate definition specificationaggregatedefinitionspecification Aggregate check attributesaggregatecheckattributes What is a Sensu named aggregate whatisacheckaggregate Sensu named aggregates are collections of check results1 accessible via the Aggregates API2 Check aggregates make it possible to treat the results of multiple disparate check results ndash executed across multiple disparate systems ndash as a single result When should named aggregates be used whenshouldcheckaggregatesbeused Check aggregates are extremely useful in dynamic environments andor environments that have a reasonable tolerance for failure Check aggregates should be used when a service can be considered healthy as long as a minimum threshold is satisfied eg are at least 5 healthy web servers are at least 70 of N processes healthy How do named aggregates work howdocheckaggregateswork Check results are included in an aggregate when a check definition includes the aggregate definition attribute3 Check results that provide an aggregate exampleaggregate are aggregated under the corresponding name eg exampleaggregate effectively capturing multiple check results as a single aggregate Example aggregated check result Aggregated check results are available from the Aggregates API2 via the aggregatesname API endpoint An aggregate check result provides a set of counters indicating the total number of client members checks and check results collected with a breakdown of how many results were recorded per status ie ok warning critical and unknown clients 15 checks 2 results ok 18 warning 0 critical 1 unknown 0 total 19 stale 0 Additional aggregate data is available from the Aggregates API including Sensu client members of a named aggregate and the corresponding checks which are included in the aggregate curl s httplocalhost4567aggregateselasticsearchclients jq name 1424242 checks elasticsearchservice elasticsearchclusterhealth name 1424243 checks elasticsearchservice Aggregate data may also be fetched per check that is a member of the named aggregate along with the corresponding clients that are producing results for said check curl s httplocalhost4567aggregateselasticsearchchecks jq name elasticsearchservice clients 1424242 i424243 name elasticsearchclusterhealth clients 1424242 Aggregate configuration Example aggregate definition The following is an example check definition6 a JSON configuration file located at etcsensuconfdcheckaggregateexamplejson checks examplecheckaggregate command dosomethingrb o option aggregate exampleaggregate handle false Aggregate definition specification NOTE aggregates are created via the aggregate Sensu check definition attribute4 The configuration examples provided above and the specification provided here are for clarification and convenience only ie this specification is just a subset of the check definition specification5 and not a definition of a distinct Sensu primitive Aggregate check attributes aggregate "},{"title":"Sensu Checks","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/checks","display_name":"Sensu Core 1.0: Sensu Checks","content":" Reference documentation What is a Sensu checkwhatisasensucheck Sensu check specificationsensucheckspecification Check commandscheckcommands What is a check commandwhatisacheckcommand Check command argumentscheckcommandarguments How and where are check commands executedhowandwherearecheckcommandsexecuted Check execution platformcheckexecutionplatform How are checks scheduledhowarechecksscheduled Subscription checkssubscriptionchecks Standalone checksstandalonechecks Check resultscheckresults What is a check resultwhatisacheckresult Example check result outputexamplecheckresultoutput Check token substitutionchecktokensubstitution What is check token substitutionwhatischecktokensubstitution Example check tokensexamplechecktokens Check token specificationchecktokenspecification Token substitution syntaxtokensubstitutionsyntax Token substitution default valuestokensubstitutiondefaultvalues Unmatched tokensunmatchedtokens Check configurationcheckconfiguration Example check definitionexamplecheckdefinition Check definition specificationcheckdefinitionspecification Check namingchecknames CHECK attributescheckattributes subdue attributessubdueattributes Custom attributescustomattributes Check result specificationcheckresultspecification check attributescheckresultcheckattributes client attributescheckresultclientattributes What is a Sensu check Sensu checks are commands executed by the Sensu client1 which monitor a condition eg is Nginx running or collect measurements eg how much disk space do I have left Although the Sensu client will attempt to execute any command defined for a check successful processing of check results requires adherence to a simple specification Sensu check specification Result data is output to STDOUT or STDERR2 For standard checks this output is typically a humanreadable message For metrics checks this output contains the measurements gathered by the check Exit status code indicates state 0 indicates OK 1 indicates WARNING 2 indicates CRITICAL exit status codes other than 0 1 or 2 indicate an UNKNOWN or custom status PRO TIP Those familiar with the Nagios3 monitoring system may recognize this specification as it is the same one used by Nagios plugins As a result Nagios plugins can be used with Sensu without any modification At every execution of a check command ndash regardless of success or failure ndash the Sensu client publishes the checks result4 for eventual handling by the event processor5 ie the Sensu server6 Check commands What is a check command Each Sensu check definition7 defines a command and the interval at which it should be executed Check commands are literally executable commands which will be executed on the Sensu client1 run as the sensu user Most check commands are provided by Sensu check plugins8 Check command arguments Sensu check command attributes may include command line arguments for controlling the behavior of the command executable Most Sensu check plugins8 provide support for command line arguments for reusability How and where are check commands executed As mentioned above all check commands are executed by Sensu clients1 as the sensu user Commands must be executable files that are discoverable on the Sensu client system ie installed in a system PATH directory9 NOTE By default the Sensu installer packages will modify the system PATH for the Sensu processes to include etcsensuplugins As a result executable scripts eg plugins located in etcsensuplugins will be valid commands This allows command attributes to use relative paths for Sensu plugin commands eg command checkhttprb u httpssensuapporg Check execution platform How are checks scheduled Sensu offers two distinct check execution schedulers the Sensu serverserver and the Sensu client10 monitoring agent The Sensu server schedules and publishes check execution requests to client subscriptions via a PublishSubscribe model11 ie subscription checkssubscriptionchecks The Sensu client monitoring agent schedules and executes standalone checks12 on the local system only Because Sensus execution schedulers are not mutually exclusive any Sensu client may be configured to both schedule and execute its own standalone checks as well as execute subscription checks scheduled by the Sensu server Subscription checks Sensu checks which are centrally defined and scheduled by the Sensu server6 are called subscription checks Sensus use of a message bus transport13 for communication enables topicbased communication14 mdash where messages are published to a specific topic and consumers subscribe to one or more specific topics This form of communication is commonly referred to as the publishsubscribe pattern11 or pubsub for short Subscription checks have a defined set of subscribers15 a list of transport13 topics14 that check requests will be published to Sensu clients become subscribers to these topics ie subscriptions via their individual client definition16 subscriptions attribute In practice subscriptions will typically correspond to a specific role andor responsibility eg a webserver database etc Subscriptions are a powerful primitives in the monitoring context because they allow you to effectively monitor for specific behaviors or characteristics corresponding to the function being provided by a particular system For example disk capacity thresholds might be more important or at least different on a database server as opposed to a webserver conversely CPU andor memory usage thresholds might be more important on a caching system than on a file server Subscriptions also allow you to configure check requests for an entire group or subgroup of systems rather than require a traditional 11 mapping Standalone checks Sensu checks which are defined on a Sensu client1 with the check definition attribute17 standalone set to true are called standalone checks The Sensu client provides its own scheduler10 for scheduling standalone checks which ensures scheduling consistency between Sensu clients with identical check definitions assuming that system clocks are synchronized via NTP18 Standalone checks are an important complement to subscription checks19 because they provide a decentralized management alternative for Sensu Check results What is a check result A check result is a JSON20 document published as a message on the Sensu transport13 by the Sensu client upon completion of a check execution Sensu check results include the check definition attributes17 eg command subscribers interval name etc including custom attributes21 the client name the result was submitted from and the output of the check Example check result output check status 0 command checkhttprb u httpssensuapporg subscribers demo interval 60 name sensuwebsite issued 1458934742 executed 1458934742 duration 0637 output CheckHttp OK 200 78572 bytesn client sensudocs NOTE please refer to the check result specification38 below for more information about check results Check token substitution What is check token substitution Sensu check definitions17 may include attributes that you may wish to override on a clientbyclient basis For example check commands23 ndash which may include command line arguments23 for controlling the behavior of the check command ndash may benefit from clientspecific thresholds etc Sensu check tokens are check definition placeholders that will be replaced by the Sensu client with the corresponding client definition attribute16 values including custom attributes24 NOTE Sensu check tokens were formerly known as check command tokens which limited token substitution to the check command attribute command tokens were also sometimes referred to as Sensu client overrides a reference to the fact that command tokens allowed client attributes to override check command arguments23 NOTE Check tokens are processed before check execution therefore token substitution will not apply to check data delivered via the local client socket input46 Example check tokens The following is an example Sensu check definition17 using three check tokens for check command arguments23 In this example the checkdiskusagerb command accepts w warning and c critical arguments to indicate the thresholds as percentages for creating warning or critical events As configured this check will create a warning event at 80 disk capacity unless a different threshold is provided by the client definition ie diskwarning80 and a critical event will be created if disk capacity reaches 90 unless a different threshold is provided by the client definition ie diskcritical90 This example also creates a custom check definition attribute called environment which will default to a value of production unless a different value is provided by the client definition ie environmentproduction checks checkdiskusage command checkdiskusagerb w diskwarning80 c diskcritical90 subscribers production interval 60 environment environmentproduction The following example Sensu client definition16 would provide the necessary attributes to override the diskwarning diskcritical and environment tokens declared above client name i424242 address 1002100 subscriptions production webserver mysql disk warning 75 critical 85 environment development Check token specification Token substitution syntax Check tokens are invoked by wrapping references to client attributes with triple colons ie three colon characters ie Nested Sensu client definition attributes16 can be accessed via dot notation eg diskwarning address would be replaced with the client address attribute26 url would be replaced with a custom attribute24 called url diskwarning would be replaced with a custom attribute24 called warning nested inside of a JSON hash called disk Token substitution default values checktokendefaultvalues Check token default values can be used as a fallback in the event that an attribute is not provided by the client definition16 Check token default values are separated by a pipe character and can be used to provide a fallback value for clients that are missing the declared token attribute urlhttpssensuapporg would be replaced with a custom attribute24 called url If no such attribute called url is included in the client definition the default or fallback value of httpssensuapporg will be used Unmatched tokens If a token substitution default value25 is not provided ie as a fallback value and the Sensu client definition does not have a matching definition attribute a check result4 indicating unmatched tokens will be published for the check execution eg Unmatched check tokens diskwarning Check configuration Example check definition The following is an example Sensu check definition a JSON configuration file located at etcsensuconfdchecksensuwebsitejson This check definition uses a Sensu plugin27 named checkhttprb28 to ensure that the Sensu website is still available The check is named sensuwebsite and it runs on Sensu clients with the production subscription15 at an interval of 60 seconds checks sensuwebsite command checkhttprb u httpssensuapporg subscribers production interval 60 contact ops Check definition specification Check naming checknames Each check definition has a unique check name used for the definition key Every check definition is within the checks configuration scope29 A unique string used to nameidentify the check Cannot contain special characters or spaces Validated with Ruby regex30 wmatchcheckname CHECK attributes The following attributes are configured within the checks CHECK configuration scope29 where CHECK is a valid check name41 type "},{"title":"Sensu Client","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/clients","display_name":"Sensu Core 1.0: Sensu Client","content":" Reference documentation What is a Sensu clientwhatisasensuclient Client keepalivesclientkeepalives What is a client keepalivewhatisaclientkeepalive Client registration the client registryregistrationandregistry Registration eventsregistrationevents Proxy clientsproxyclients How are keepalive events createdkeepaliveevents Client keepalive configurationclientkeepaliveconfiguration Client signatureclientsignature Client subscriptionsclientsubscriptions What is a client subscriptionwhatisasensusubscription Roundrobin client subscriptionsroundrobinclientsubscriptions Client subscription configurationclientsubscriptionconfiguration Client socket inputclientsocketinput What is the Sensu client socketwhatisthesensuclientsocket Example client socket usageexampleclientsocketusage Client socket configurationsocketattributes Standalone check execution schedulerstandalonecheckexecutionscheduler Client configurationclientconfiguration Example client definitionexampleclientdefinition Client definition specificationclientdefinitionspecification client attributesclientattributes socket attributessocketattributes httpsocket attributeshttpsocketattributes keepalive attributeskeepaliveattributes thresholds attributesthresholdsattributes registration attributesregistrationattributes deregistration attributesderegistrationattributes ec2 attributesec2attributes chef attributeschefattributes puppet attributespuppetattributes servicenow attributesservicenowattributes Custom attributescustomattributes What is a Sensu client Sensu clients are monitoring agents1 which are installed and run on every system eg server container etc that needs to be monitored The client is responsible for registering the system with Sensu sending client keepalive2 messages the Sensu heartbeat mechanism and executing monitoring checks Each client is a member of one or more subscriptions3 ndash a list of roles andor responsibilities assigned to the system eg a webserver database etc Sensu clients will subscribe to or watch for check requests4 published by the Sensu server5 via the Sensu Transport6 execute the corresponding requests locally and publish the results of the check back to the transport to be processed by a Sensu server Client keepalives What is a client keepalive Sensu Client keepalives are the heartbeat mechanism used by Sensu to ensure that all registered Sensu clients are still operational and able to reach the Sensu Transport6 Sensu clients publish keepalive messages containing client configuration data to the Sensu transport every 20 seconds If a Sensu client fails to send keepalive messages over a period of 120 seconds by default the Sensu server or Sensu Enterprise will create a keepalive event7 Keepalives can be used to identify unhealthy systems and network partitions among other things and keepalive events can trigger email notifications and other useful actions Client registration the client registry registrationandregistry In practice client registrations happens when a Sensu server processes a client keepalive message for a client that is not already registered in the Sensu client registry based on the configured client name or source attribute This client registry is stored in the Sensu data store8 and is accessible via the Sensu Clients API9 All Sensu client data provided in client keepalive messages gets stored in the client registry which data is used to add context to Sensu Events7 and to detect Sensu clients in an unhealthy state Registration events If a Sensu event handler30 named registration is configured or if a Sensu client definition includes a registration attribute31 the Sensu server5 will create and process a Sensu event7 for the client registration applying any configured filters26 and mutators32 before executing the configured handlers30 Registration events are useful for executing onetime handlers for new Sensu clients For example registration event handlers can be used to update external Configuration Management Databases CMDBs34 such as ServiceNow35 etc To configure a registration event handler please refer to the Sensu event handler documentation30 for instructions on creating a handler named registration Alternatively please see Client definition registration attributes31 below WARNING registration events are not stored in the event registry in the Sensu data store8 so they are not accessible via the Sensu API however all registration events are logged in the Sensu server5 log Proxy clients Sensu proxy clients formerly known as Justintime or JIT clients are dynamically created clients added to the client registry if a client does not already exist for a check result Proxy client registration differs from keepalivebased registration because the registration event happens while processing a check result not a keepalive message If a check result includes a source attribute a proxy client will be created for the source and the check result will be stored under the newly created client Sensu proxy clients allow Sensu to monitor external resources eg on systems andor devices where a sensuclient cannot be installed such a network switches using the defined check source to create a proxy clients for the external resource Once created proxy clients work much in the same way as any other Sensu client eg they are used to store check execution history and provide context within event data NOTE keepalive monitoring is not supported for proxy clients as they are inherently unable to run a sensuclient Proxy client example Proxy clients are created when a check result includes a source attribute as follows check status 0 command checkhttprb u httpssensuapporg subscribers demo interval 60 name sensuwebsite source sensuapporg issued 1458934742 executed 1458934742 duration 0637 output CheckHttp OK 200 78572 bytesn client sensudocs NOTE this source attribute can be provided in a check definition14 or included in a check result published to the Sensu client input socket36 By default proxy client data includes a minimal number of attributes The following is an example of proxy client data that is added to the registry name switchx address unknown subscriptions keepalives false The Sensu API can be used to update proxy client data in the client registry To update proxy client data please refer to the Client API reference documentation9 Create a proxy client via the client socket The following is an example of how to create a proxy client payload via the client socketclientsocketinput using netcat echo source mysql01 name app01 output could not connect to mysql status 1 nc localhost 3030 How are keepalive events created keepaliveevents Sensu servers including Sensu Enterprise monitor the Sensu client registry for stale client data detecting clients that have failed to send client keepalive messages10 for more than 120 seconds by default When a Sensu server detects that a client hasnt sent a keepalive message within the configured threshold the Sensu server or Sensu Enterprise will create an event this is different from how events are created for monitoring checks see How are Sensu events created11 Client keepalive configuration For more information on configuring client keepalives please see the client keepalive attribute reference documentation12 below Sensu client keepalives are published to the Sensu transport every 20 seconds Client keepalive behavior can be configured per Sensu client allowing each Sensu client to set its own alert thresholds and keepalive event handlers By default client data is considered stale if a keepalive hasnt be received in 120 seconds WARNING By default keepalive events will be sent to the Sensu handler named keepalive if defined or the default handler will be used To configure the keepalive check for a Sensu client please refer to the client keepalive attributes reference documentation12 Client signature Sensu client definitions may specify a unique string identifier as their signature which is included in each keepalive message Once a client advertises a signature via keepalives the server will expect that signature to be present in any keepalives or check results originating from the client Any keepalives or check results which do not contain a matching signature will be dropped with an invalid client signature warning in the log A client can begin to use a signature if one was not previously configured but removing a client signature requires deleting the client Providing a unique client signature prevents other clients from accidentally or maliciously submitting keepalives or check results using the same client name Client subscriptions What is a client subscription whatisasensusubscription Sensus use of the publishsubscribe pattern of communication13 allows for automated registration deregistration of ephemeral systems At the core of this model are Sensu client subscriptions Each Sensu client has a defined set of subscriptions a list of roles andor responsibilities assigned to the system eg a webserver database etc These subscriptions determine which monitoring checks are executed by the client Client subscriptions allow Sensu to request check executions on a group of systems at a time instead of a traditional 11 mapping of configured hosts to monitoring checks Sensu checks target Sensu client subscriptions using the check definition attribute subscribers14 Roundrobin client subscriptions Roundrobin client subscriptions allow checks to be executed on a single client within a subscription in a roundrobin fashion To create a roundrobin client subscription prepend the subscription name with roundrobin eg roundrobinelasticsearch Any check that targets the roundrobinelasticsearch subscription will have its check requests sent to clients in a roundrobin fashion meaning only one member client in the subscription will execute a roundrobin check each time it is published The following is a Sensu client definition that includes a roundrobin subscription client name i424242 address 8888 subscriptions production webserver roundrobinwebserver The following is a Sensu check definition that targets a roundrobin subscription checks webapplicationapi command checkhttprb u httpslocalhost8080apiv1health subscribers roundrobinwebserver interval 20 Client subscription configuration To configure Sensu client subscriptions for a client please refer to the client subscriptions attribute reference documentation15 In addition to the subscriptions defined in the client configuration Sensu clients also subscribe automatically to a subscription matching their client name For example a client named i424242 will subscribe to check requests for the subscription clienti424242 This makes it possible to generate adhoc check requests targeting specific clients via the request API49 Client socket input What is the Sensu client socket Every Sensu client has a TCP UDP and HTTP socket listening for external check result input The Sensu client sockets listen by default on localhost port 3030 for TCPUDP and 3031 for HTTP and expect JSON formatted check results allowing external sources eg your web application backup scripts etc to push check results without needing to know anything about Sensus internal implementation An excellent client socket use case example is a web application pushing check results to indicate database connectivity issues To configure the Sensu client socket for a client please refer to the client socket attributes16 HTTP Socket The HTTP socket just like the TCP and UDP sockets accepts check results but it requires a wellformed HTTP request and exposes other functionality that is not possible with the raw TCPUDP sockets In exchange for a bit more complexity the HTTP socket interface has the advantage of being more expressive than a raw TCPUDP socket both in the requests that it accepts and how it responds and so exposes more functionality The following endpoints are available for the HTTP socket GET info This endpoint returns 200 OK with some basic Sensu information like the version and transport metrics POST results This endpoint expects an applicationjson body with a check result GET settings This endpoint responds with 200 OK and the sensu configuration Due to the possible sensitive nature of the client settings eg passwords might be in the config this endpoint is protected using HTTP basic authentication and by default the information returned is redacted eg common config keys like password have their values replaced by REDACTED See the redact configuration option if you need control over what is redacted This endpoint accepts the optional query string redactedfalse to disable redaction Refer to the http client socket attributes50 for details on configuring the HTTP basic authentication details that this endpoint requires GET brew This endpoint gets you some fresh coffee Try it Any requests for unknown endpoints will get a 404 with some help information in the body At the moment only unsecure HTTP no HTTPS is supported To configure the Sensu HTTP client socket please refer to the http client socket attributes50 Example client socket usage The following is an example demonstrating external check result input via the Sensu client TCP socket The example uses Bashs builtin devtcp file to communicate with the Sensu client socket echo name app01 output could not connect to mysql status 1 devtcplocalhost3030 Netcat17 can also be used instead of the TCP file echo name app01 output could not connect to mysql status 1 nc localhost 3030 You can do the same using the HTTP socket curl v H ContentType applicationjson X POST d name app01 output could not connect to mysql status 1 localhost 3031 Creating a dead mans switch The Sensu client sockets in combination with check TTLs can be used to create whats commonly referred to as dead mans switches Outside of the software industry a dead mans switch is a switch that is automatically triggered if a human operator becomes incapacitated source Wikipedia18 Sensu is more interested in detecting silent failures than incapacited human operators By using Check TTLs Sensu is able to set an expectation that a Sensu client will continue to publish results for a check at a regular interval If a Sensu client fails to publish a check result and the check TTL expires Sensu will create an event to indicate the silent failure For more information on check TTLs please refer to the check attributes reference documentation14 A great use case for the Sensu client socket is to create a dead mans switch for backup scripts to ensure they continue to run successfully at regular intervals If an external source sends a Sensu check result with a check TTL to the Sensu client socket Sensu will expect another check result from the same external source before the TTL expires The following is an example of external check result input via the Sensu client TCP socket using a check TTL to create a dead mans switch for MySQL backups The example uses a check TTL of 25200 seconds or 7 hours A MySQL backup script using the following code would be expected to continue to send a check result at least once every 7 hours or Sensu will create an event7 to indicate the silent failure echo name backupmysql ttl 25200 output backed up mysql successfully sizemb568 status 0 nc localhost 3030 echo name backupmysql ttl 25200 output failed to backup mysql status 1 nc localhost 3030 Standalone check execution scheduler In addition to subscribing to client subscriptions3 and executing check requests published by the Sensu server19 the Sensu client is able to maintain its ownseparate schedule for standalone checks20 Because the Sensu client shares the same check scheduling algorithm21 as the Sensu server it is not only possible to have consistency between subscription checks22 and standalone checks mdash its also possible to maintain consistency between standalone checks across an entire infrastructure assuming that system clocks are synchronized via NTP23 Client configuration Example client definition The following is an example Sensu client definition a JSON configuration file located at etcsensuconfdclientjson This client definition provides Sensu with information about the system on which it resides This is a production system running a web server and a MySQL database The client name attribute is required in the definition and must be unique client name i424242 address 8888 subscriptions production webserver mysql socket bind 127001 port 3030 Client definition specification The client definition uses the client configuration scope24 client attributes name "},{"title":"Sensu Configuration","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/configuration","display_name":"Sensu Core 1.0: Sensu Configuration","content":" Reference documentation How does Sensu load configurationhowdoessensuloadconfiguration Sensu configuration sourcessensuconfigurationsources Configuration load orderconfigurationloadorder Configuration mergingconfigurationmerging Configuration loggingconfigurationlogging Configuration scopesconfigurationscopes Configuration scopes are relativeconfigurationscopesarerelative Configuration scope examplesconfigurationscopeexamples Sensu service init configurationsensuservicescriptconfiguration Sensu service init configuration variablessensuservicescriptconfigurationvariables Sensu command line interfaces and argumentssensucommandlineinterfacesandarguments Sensu environment variablessensuenvironmentvariables Sensu configuration specificationsensuconfigurationspecification Example sensu configurationexamplesensuconfiguration Toplevel configuration scopestoplevelconfigurationscopes How does Sensu load configuration Sensu configuration sources By default the main configuration file for the Sensu platform is located at etcsensuconfigjson However Sensu also provides support for loading configuration from a directory containing multipledisparate configuration files andor environment variables Sensu merges configuration parameters provided from these three distinct configuration sources environment variables configuration file and configuration directories into a single Hash This type of Hash merging is often called deep merging and is probably the most important concept to understand when learning how to configure Sensu Configuration load order As previously mentioned Sensu configuration can be provided via three distinct sources environment variables a configuration file and one or more directories containing configuration files Sensu loads configuration from these sources in the following order 1 The Sensu service scripts provide command line arguments1 for starting the Sensu services eg the location of the configuration file c the location of configuration directories d etc 2 Sensu will load configuration from environment variables2 3 Sensu loads configuration from the configuration file by default this is located at etcsensuconfigjson 3 Sensu loads configuration snippets from configuration files located in a Sensu configuration directory by default this is etcsensuconfd however it is possible to configure Sensu to load from multiple configuration directories see command line arguments1 below NOTE configuration file load order is dictated by a json glob of the configuration directory as such it is strongly recommended to avoid a dependency on configuration directory file load order eg if youre attempting to name configuration files in the configuration directory to control load order youre doing it wrong Configuration merging To explain how Sensu merges configuration parameters from the various disparate configuration sources please note the following example scenario 1 The Sensu runtime configuration is stored as an inmemory Hash object For the purposes of providing a visual example lets imagine that this Hash object is actually a JSON document which begins life as Sensu is started as an empty JSON document Initial Sensu configuration Hash in memory When Sensu is started it will begin to collect configuration from environment variables a configuration file and one ore more configuration directories which configuration parameters will be used to build up this configuration Hash 2 For the purposes of this example lets assume that the first configuration snippet that Sensu encounters is a configuration file located at etcsensuconfigjson with the following contents New config file on disk at etcsensuconfigjson rabbitmq host 100110 vhost sensu user sensu password secret redis host 100120 port 6379 password secret At this time the Sensu configuration Hash in memory will look like Updated Sensu configuration Hash in memory rabbitmq host localhost vhost sensu user sensu password secret redis host localhost port 6379 password secret 3 Now lets see what happens when Sensu encounters another configuration snippet eg a file located in a Sensu configuration directory such as etcsensuconfdrabbitmqjson New config file contents on disk at etcsensuconfdrabbitmqjson rabbitmq host 100110 user sensu01 password newsecret The second configuration snippet provided configuration for the rabbitmq scope some of which already exists in the Sensu configuration Hash in memory but also missing some attributes which already exist in the Sensu configuration Hash ie vhost The result of merging this configuration snippet into the Sensu configuration Hash in memory is as follows Updated Sensu configuration Hash in memory rabbitmq host 100110 vhost sensu user sensu01 password newsecret redis host localhost port 6379 password secret The result of the deep merge is that the configuration snippet provided by etcsensuconfdrabbitmqjson was overlaid on the Sensu configuration Hash in memory essentially overwriting the previously existing values provided by the configuration snippet while not discarding configuration attributes that already existed in the rabbitmq configuration scope even though they werent provided by the configuration snippet Configuration logging As configuration snippets are applied to the Sensu configuration Hash ie during deep merge all configuration changes are logged to the corresponding log file eg the Sensu server API or Client logs Configuration scopes Because Sensu configuration can be provided in so many different sources it is important to understand that ndash regardless of the physical location of the configuration data eg from the main configuration file or from a configuration file in a configuration directory ndash all configuration must be placed in the appropriate scope in the JSON file ie the named level that attributes should be defined in For example the root or scope of the Sensu configuration would be any attributes defined at the top level of a JSON configuration file such as the configuration attributes for rabbitmq redis or the api rabbitmq redis api Attributes defined in the root scope or top level provide the corresponding scopes for additional configuration settings eg the rabbitmq attribute defined above provides the rabbitmq scope a JSON Hash for the actual RabbitMQ configuration settings Configuration scopes are relative Throughout the Sensu documentation whenever a configuration scope is mentioned it is describing the named level that the corresponding configuration attributes should be defined within which may be relative to any potentially related scopes Please note the following examples Configuration scope examples The client scope client In the Sensu Client reference documentation3 it explains that The client definition uses the client definition scope Which means that regardless where you might store a configuration file containing Sensu client configuration on disk assuming it is in a location that will be loaded by Sensu the file should contain a top level attribute called client client The client socket scope socket The Sensu Client reference documentation3 continues to explain that Sensu clients may have a socket attribute and that there are additional Client Socket attributes4 which should be defined within the socket scope The following attributes are configured within the socket client definition attribute scope Which means that regardless where you might store a configuration file containing Sensu Client Socket configuration on disk assuming it is in a location that will be loaded by Sensu the file should contain a top level attribute called client and another attribute defined within the client scope or level called socket client socket Thus when the Client Socket reference documentation continues to explain that the bind and port attributes should be defined in the Client Socket scope it means they should live under the socket level of the JSON file regardless of where you might store a configuration file containing said configuration attributes on disk assuming it is in a location that will be loaded by Sensu client socket bind 0000 port 3031 Sensu service service configuration sensuservicescriptconfiguration The Sensu services are managed by service scripts that are provided in the Sensu packages The Sensu service scripts are able to startstoprestart the corresponding Sensu services eg the Sensu server API client etc The default Sensu service scripts and related configuration files containing configuration variables are located as follows etcdefaultsensu sourced by the init scripts to provide configuration variables5 etcinitdsensuservice shared init script used by the Sensu service init scripts etcinitdsensuserver etcinitdsensuapi etcinitdsensuclient etcinitdsensuenterprise etcinitdsensuenterprisedashboard Sensu service script configuration variables sensuservicescriptconfigurationvariables The following configuration variables can be set in the service scripts for the platform EMBEDDEDRUBY "},{"title":"Sensu Data Store","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/data-store","display_name":"Sensu Core 1.0: Sensu Data Store","content":" Reference documentation What is the Sensu data storewhatisthesensudatastore What is the Sensu data store Sensu services use a data store Redis1 to persist monitoring data including the Sensu client registry check results check execution history and current event data All Sensu Core server and API processes ie sensuserver and sensuapi or the Sensu Enterprise process ie sensuenterprise require access to the same instance of the defined data store ie a Redis server or cluster NOTE unlike the Sensu Transport2 ndash which is a Sensu library that allows Sensu to be used with different transport backends eg RabbitMQ or Redis etc ndash the Sensu Data Store is not abstracted andor extensible At this time Redis is the only data store supported by Sensu Having said that because this may change at some point in the future we are beginning to use the term data store in the Sensu documentation as an abstraction for the functions currently provided by Redis 1 redis 2 transport"},{"title":"Sensu Events","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/events","display_name":"Sensu Core 1.0: Sensu Events","content":" Reference documentation What are Sensu eventswhataresensuevents How are Sensu events createdhowaresensueventscreated Event actionseventactions Event dataeventdata Example eventexampleevent Event data specificationeventdataspecification EVENT attributeseventattributes check attributescheckattributes client attributesclientattributes What are Sensu events whataresensuevents Sensu events are created to acknowledge that something potentially noteworthy has occurred which events may then be processed by one or more event handlers1 to do things such as send an email or invoke an automated action Every Sensu event provides context called event data2 which contains information about the originating Sensu client3 and the corresponding check result4 How are Sensu events created A Sensu Event is created every time a check result10 is processed by the Sensu server regardless of the status indicated by the check result An Event is created by collating data from the check result the client registry22 and additional context added at the time of processing Event actions Sensu supports the following event actions create Indicates a check result status change from zero to nonzero resolve Indicates a check result status change from a nonzero to zero flapping Indicates a rapid change in check result status NOTE for more information on event actions please see the Sensu event data specification5 below Event data Example event The following is an example Sensu event By default event data is JSON formatted making it languageindependent and fairly human readable id ef6b87d21f89439f8bea33881436ab90 action create timestamp 1460172826 occurrences 2 check type standard totalstatechange 11 history 0 0 1 1 2 2 status 2 output No keepalive sent from client for 230 seconds 180 executed 1460172826 issued 1460172826 name keepalive thresholds critical 180 warning 120 client timestamp 1460172596 version 100 socket port 3030 bind 127001 subscriptions production environment development address 127001 name client01 Event data specification EVENT attributes The following attributes are available in the root scope of the event data JSON document id "},{"title":"Sensu Extensions","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/extensions","display_name":"Sensu Core 1.0: Sensu Extensions","content":" Reference documentation What is a Sensu extensionwhatisasensuextension Installing Sensu extensionsinstallingsensuextensions Installing Sensu legacy extensionsinstallingsensulegacyextensions Configuring Sensu extensionsconfiguringsensuextensions The Sensu Extension gemthesensuextensiongem The Sensu Extensions gem templatethesensuextensionsgemtemplate What is a Sensu extension Unlike Sensu plugins which spawn a new child process at every execution Sensu extensions execute directly inside the EventMachine reactor thread1 of a Sensu client or server process Because they avoid the overhead of spawning a new process at every invocation Sensu extensions can fulfill the same functions as plugins acting as checks filters mutators or handlers but with much greater efficiency WARNING While their performance characteristics are quite desirable Sensu extensions come with major caveats extensions have full access to Sensus internals and any extension which blocks the EventMachine reactor for any period of time eg blocking on disk IO or network request will have a very significant negative impact on Sensus performance and functionality The details of evented programming as implemented by EventMachine are outside the scope of this document but Javier Acero has helpfully written on the implications of blocking the reactor2 Installing Sensu extensions As of version 026 Sensu supports loading extensions from properly packaged gems This approach takes advantage of the existing RubyGems infrastructure and tools to make publishing and installing Sensu extensions easy Use sensuinstall to install Sensu Extensions The Sensu Core package provides a tool called sensuinstall a simple wrapper around the Ruby gem utility The Sensu Install tool sensuinstall simplifies installation of Rubybased extensions The sensuinstall tool can be run with one or more arguments that determine the actions to take sensuinstall h Usage sensuinstall options h help Display this message v verbose Enable verbose logging p plugin PLUGIN Install a Sensu PLUGIN P plugins PLUGINPLUGIN PLUGIN or commadelimited list of Sensu plugins to install e extension EXTENSION Install a Sensu EXTENSION E extensions EXTENSIONEXT EXTENSION or commadelimited list of Sensu extensions to install s source SOURCE Install Sensu plugins and extensions from a custom SOURCE c clean Clean up remove other installed versions of the plugins andor extensions x proxy PROXY Install Sensu plugins and extensions via a PROXY URL NOTE sensuinstall is only available in Sensu Core 0210 Sensu extensions can be installed using the sensuinstall executable EXAMPLE installingsensuextensionsfromgemsexample sensuinstall e sensuextensionssystemprofile Or sensuinstall can prepend sensuextensions automatically sensuinstall e systemprofile Configuring Sensu to load extensions Once an extension is installed via gem Sensu must be explicitly configured to load the extension This is accomplished by providing configuration under the top level extensions attribute EXAMPLE configuringextensionloadingfromgemsexample extensions systemprofile gem sensuextensionssystemprofile EXAMPLE configuringextensionloadingfromgemswversionexample Configuration may optionally include a version specification extensions systemprofile gem sensuextensionssystemprofile version 100 Once extensions have been explicitly enabled in Sensus configuration they will be loaded the next time Sensu processes are restarted Informational messages are printed to the log when extensions are loaded EXAMPLE configuringextensionloadingfromgemslogexample timestamp20160808T1637257112750000levelwarnmessageloading extension gemgemsensuextensionssystemprofileversion100 timestamp20160808T1637257114190000levelwarnmessagerequiring extension gemrequiresensuextensionssystemprofile timestamp20160808T1637257115790000levelwarnmessageloaded extensiontypechecknamesystemprofiledescriptioncollects system metrics using the graphite plaintext format NOTE Explicit extension loading does not apply to legacy extensionsinstallingsensulegacyextensions which are loaded by virtue of being placed in the extension directory Installing Sensu legacy extensions Sensu extensions which are not properly packaged as gems are considered legacy meaning they predate the new specification for loading Sensu Extensions from gems These legacy extensions are loaded from the directory specified by the extensiondir flag provided when Sensu processes are started8 On most systems this defaults to etcsensuextensions as specified by the command flags passed to the sensuclient or sensuserver process via the service supervision scheme in use eg init runit upstart systemd etc Extensions should be installed directly into the extensions directory When an legacy extension has dependencies on thirdparty Ruby gems or other external applications those dependencies must be installed into the Sensu embedded Ruby environment as well Configuring Sensu Extensions The configurability of Sensu extensions is entirely a function of the extension code For example filters and mutators cannot be applied to an extension via a standard handler definition Instead these aspects of the extensions configuration must be defined in code by overriding the SensuExtensionBase definition method10 EXAMPLE extensionconfigurationincodeexample def definition type extension name name filters occurrences mutator onlycheckoutput end The above code would configure the associated extension to apply the occurrences filter and then the onlycheckoutput mutator prior to executing the extensions custom run method By virtue of being loaded into the Sensu client or server process Sensu extensions have access to the running Sensu configuration As such an extension can make use of any available configuration scopes9 but the prevailing convention is for extensions to use unique toplevel configuration scopes The systemprofile4 extension installed in a previous example looks to the toplevel systemprofile configuration scope The following configuration added to etcsensuconfd would change the systemprofile extensions Graphite path prefix from a default value of system to profile EXAMPLE providingextensionconfigurationexample systemprofile pathprefix profile The sensuextension gem Unlike Sensu plugins which may be written in any programming language Sensu extensions must be written in Ruby The sensuextension5 gem provides SensuExtensionBase and other classes which Sensu extensions should subclass The sensuextensions gem template The sensuextensions gem template12 provides a starting point for those who wish to author their own Sensu extension as a Ruby gem It is recommended that your gem follow the naming pattern sensuextensionNAME in order to ensure it can be easily installed with sensuinstall NOTE if you choose not to use this template for your extension note the directory structure it demonstrates eg placing extension code under libsensuextensions are required to ensure the extension is properly loaded Example extensions For simple examples of Sensu extensions consider the onlycheckoutput mutator6 or the debug handler7 both of which ship with Sensu You can find other Sensu extensions some of which are packaged in the Sensu Core distribution by searching RubyGems11 1 httpsgithubcomeventmachineeventmachinewikiGeneralIntroduction 2 httpjavieracerocomblogstartingwitheventmachineiv 4 httpsrubygemsorggemssensuextensionssystemprofile 5 httpsgithubcomsensusensuextension 6 httpsgithubcomsensuextensionssensuextensionsonlycheckoutputblobmasterlibsensuextensionsonlycheckoutputrb 7 httpsgithubcomsensuextensionssensuextensionsdebugblobmasterlibsensuextensionsdebugrb 8 configurationsensuserviceinitconfiguration 9 configurationconfigurationscopes 10 httpsgithubcomsensusensuextensionblobv150libsensuextensionrbL42L50 11 httpsrubygemsorgsearchutf8E29C93querysensuextensions 12 httpsgithubcomsensuextensionstemplate"},{"title":"Sensu Filters","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/filters","display_name":"Sensu Core 1.0: Sensu Filters","content":" Reference documentation What are Sensu Filterswhataresensufilters When to use a filterwhentouseafilter How do Sensu filters workhowdosensufilterswork Inclusive and exclusive filteringinclusiveandexclusivefiltering Filter attribute comparisonfilterattributecomparison Filter attribute evaluationfilterattributeevaluation Filter attribute eval tokensfilterattributeevaltokens What are filter attribute eval tokenswhatarefilterattributeevaltokens Example filter attribute eval tokenexamplefilterattributeevaltoken Filter attribute eval token specificationfilterattributeevaltokenspecification Eval token interpolationfilterattributeevaltokenspecification Eval token default valuesevaltokendefaultvalues Filter configurationfilterconfiguration Filter definition specificationfilterdefinitionspecification Filter namingfilternaming Filter attributesfilterattributes when attributeswhenattributes What are Sensu filters Sensu Filters also called Event Filters allow you to filter events destined for one or more event Handlers1 Sensu filters inspect event data and match its keysvalues with filter definition attributes to determine if the event should be passed to an event handler Filters are commonly used to filter recurring events ie to eliminate notification noise and to filter events from systems in preproduction environments When to use a filter Sensu Filters allow you to configure conditional logic to be applied during the event processing flow Compared to executing an event handler evaluating event filters is an inexpensive operation which can provide overall monitoring performance gains by reducing the number of events that need to be handled Additionally by using Sensu Filters instead of building conditional logic into custom Handlers conditional logic can be applied to multiple Handlers and monitoring configuration stays DRY How do Sensu filters work Sensu Filters are applied when Event Handlers1 are configured to use one or more Filters Prior to executing a Handler the Sensu server will apply any Filters configured for the Handler to the Event Data If the Event is not removed by the Filters ie filtered out the Handler will be executed The filter analysis flow performs these steps When the Sensu server is processing an Event it will check for the definition of a handler or handlers Prior to executing each Handler the Sensu server will first apply any configured filter or filters for the Handler If multiple filters are configured for a Handler they are executed sequentially Filter attributes are compared with Event data Filters can be inclusive only matching events are handled or exclusive matching events are not handled As soon as a Filter removes an Event ie filters it out no further analysis is performed and the Event Handler will not be executed NOTE Filters specified in a handler set16 definition have no effect Filters must be specified in individual handler definitions Inclusive and Exclusive Filtering Filters can be inclusive negate false or exclusive negate true Configuring a handler to use multiple inclusive filters is the equivalent of using an AND query operator ie only handle events if they match inclusive filters x AND y AND z Configuring a handler to use multiple exclusive filters is the equivalent of using an OR operator ie only handle events if they dont match x OR y OR z Inclusive filtering by setting the filter definition attribute2 negate false only events that match the defined filter attributes are handled Exclusive filtering by setting the filter definition attribute2 negate true events are only handled if they do not match the defined filter attributes NOTE unless otherwise configured in the filter definition2 the default filtering behavior is inclusive filtering ie negate false Filter attribute comparison Filter attributes are compared directly with their event data3 counterparts For inclusive filter definitions4 ie negate false matching attributes will result in the filter returning a true value for exclusive filter definitions4 ie negate true matching attributes will result in the filter returning a false value ie the event does not pass through the filter Filters that return a true value will continue to be processed mdash via additional filters if defined mutators if defined and handlers EXAMPLE The following example filter definition entitled productionfilter will match event data3 with a custom client definition attribute5 environment production filters productionfilter negate false attributes client environment production Filter attribute evaluation When more complex conditional logic is needed than direct filter attribute comparison10 Sensu filters provide support for attribute evaluation using Ruby expressions When a Filter attribute value is a string beginning with eval the remainder is evaluated as a Ruby expression The Ruby expression is evaluated in a sandbox and provided a single variable value which is equal to the event data attribute value being compared If the evaluated expression returns true the attribute is a match Example Handling state change only Some teams migrating to Sensu have asked about reproducing the behavior of their old monitoring system which alerts only on state change This statechangeonly inclusive4 filter provides such filters statechangeonly negate false attributes occurrences eval value 1 action resolve This eval filter is effective because value of event occurrences is reset on each state change except when the event action is resolve The resolve action is set on an event when its check result status is 0 following one or more prior nonzero statuses Example Handling repeated events The following example filter definition entitled filterinterval60hourly will match event data3 with a check interval6 of 60 seconds and an occurrences value of 1 ie the first occurrence OR any occurrences value that is evenly divisible by 60 via a modulo operator7 calculation ie calculating the remainder after dividing occurrences by 60 Note that negate is true making this an exclusive filter4 if evaluation returns false the event will be handled filters filterinterval60hourly negate true attributes check interval 60 occurrences eval value 1 value 60 0 The next example will apply the same logic as the previous example but for checks with a 30 second interval filters filterinterval30hourly negate true attributes check interval 30 occurrences eval value 1 value 120 0 NOTE The effect of both of these filters is that they will only allow an events with 30second or 60second intervals to be handled1 on the first occurrence of the event and again every hour Previous examples in the older Sensu docs have not included the check interval 60 attribute which has confused some users because filtering based on occurrences alone assumes some understanding of the relationship between occurrences and interval which isnt always obvious Example Handling events during office hours only This filter evaluates the event timestamp to determine if the event occurred between 9 AM and 5 PM on a weekday Remember that negate defaults to false so this is an inclusive filter If evaluation returns false the event will not be filters ninetofiver negate false attributes timestamp eval 12345includeTimeatvaluewday Timeatvaluehourbetween917 Filter attribute eval tokens What are filter attribute eval tokens Sensu filters attributes may be evaluated using Ruby expressions10 which evaluations provide support for comparing a single event attribute variable against a basic logical statement eg is value greater than 60 When additional variables are needed beyond the single value variable provided by eval tokens may be used Eval tokens are filter attribute placeholders that can be replaced by Sensu check definition attributes6 and client definition attributes8 including custom attributes Example filter attribute eval token The following is an example Sensu filter definition2 which is using a token checkoccurrences60 as a secondary attribute in the Ruby eval expression The token will be replaced by the check definition attribute6 named occurrences if it is defined otherwise it will use the fallback value of 60 filters occurrences negate true attributes occurrences eval value checkoccurrences60 This example would be useful for filtering events that dont exceed a minimum number of occurrences as configured in the check definition Filter attribute eval token specification Eval token substitution syntax Eval tokens are invoked by wrapping event data attributes with triple colons ie three colon characters before and after the attribute ie Nested event data attributes3 may be accessed via dot notation eg checkoccurrences occurrences would be replaced with the event occurrences data11 checkmythreshold would be replaced with a custom check definition attribute12 called mythreshold Eval token default values Eval token default values can be used as a fallback in the event that an eval token attribute13 is not satisfied by event data3 Eval token default values are separated by a pipe character and can be used to provide a fallback value for events that are missing the declared token attribute checkoccurrences60 would be replaced with a check definition attribute6 called occurrences If occurrences is not defined in the check definition the default or fallback value of 60 will be used NOTE if an eval token default value is not provided ie as a fallback value and the event data does not contain a matching eval token attribute13 an log entry indicating an error called filter eval unmatched tokens will be published to the Sensu server log Filter configuration Example filter definition examplefilterdefinition The following is an example Sensu filter definition a JSON configuration file located at etcsensuconfdfilterproductionjson This is an inclusive filter definition called production The effect of this filter is that only events with the custom client attribute5 environment production will be handled filters production attributes client environment production negate false Filter definition specification Filter naming Each filter definition has a unique name used for the definition key Every filter definition is within the filters definition scope A unique string used to nameidentify the filter Cannot contain special characters or spaces Validated with Ruby regex9 wmatchfiltername Filter attributes negate "},{"title":"Sensu Handlers","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/handlers","display_name":"Sensu Core 1.0: Sensu Handlers","content":" Reference documentation What is a Sensu event handlerwhatisasensueventhandler Handler typeshandlertypes The default handlerthedefaulthandler Pipe handlerspipehandlers Pipe handler commandspipehandlercommands What is a pipe handler commandwhatisapipehandlercommand Pipe handler command argumentspipehandlercommandarguments How and where are pipe handler commands executedhowandwherearepipehandlercommandsexecuted TCPUDP handlerstcpudphandlers Transport handlerstransporthandlers Handler setshandlersets Handler configurationhandlerconfiguration Example handler definitionexamplehandlerdefinition Handler definition specificationhandlerdefinitionspecification Handler nameshandlernames HANDLER attributeshandlerattributes socket attributes TCPUDP handlerssocketattributes pipe attributes Transport handlerspipeattributess What is a Sensu event handler Sensu event handlers are actions executed by the Sensu server1 on events2 such as sending an email alert creating or resolving an incident eg in PagerDuty ServiceNow etc or storing metrics in a timeseries database eg Graphite Handler types There are several types of handlers The most common handler type is the pipe handler which works very similarly to how checks3 work enabling Sensu to interact with almost any computer program via standard streams4 Pipe handlers Pipe handlers pipe event data into arbitrary commands via STDIN TCPUDP handlers TCP and UDP handlers send event data to a remote socket eg external API Transport handlers Transport handlers publish event data to the Sensu transport5 Handler sets Handler sets also called set handlers are used to group event handlers making it easy to manage groups of actions that should be executed for certain types of events The default handler Sensu expects all events2 to have a corresponding handler Event handlers may be configured in check definitions16 however if no handler or handlers have been configured Sensu will attempt to handle the event using a handler named15 default The default handler is only a reference ie Sensu does not provide a builtin default handler so if no handler definition exists for a handler named default Sensu will log an error indicating that the event was not handled because a default handler definition does not exist To use one or more existing handlers as the default you can create a Set handler17 called default and include the existing handlers in the set Pipe handlers Pipe handlers are external commands that can consume event data6 via STDIN Example pipe handler definition handlers examplepipehandler type pipe command dosomethingawesomerb o options Pipe handler commands What is a pipe handler command Pipe handler definitions include a command attribute which are literally executable commands which will be executed on a Sensu server1 as the sensu user Pipe handler command arguments Pipe handler command attributes may include command line arguments for controlling the behavior of the command executable Most Sensu handler plugins11 provide support for command line arguments for reusability How and where are pipe handler commands executed As mentioned above all pipe handlers are executed by a Sensu server1 as the sensu user Commands must be executable files that are discoverable on the Sensu server system ie installed in a system PATH directory7 NOTE By default the Sensu installer packages will modify the system PATH for the Sensu processes to include etcsensuplugins As a result executable scripts eg plugins located in etcsensuplugins will be valid commands This allows command attributes to use relative paths for Sensu plugin commands eg command handlerircrb TCPUDP handlers tcpudphandlers TCP and UDP handlers enable Sensu to forward event data to arbitrary TCP or UDP socketst for external services to consume eg thirdparty APIs Example TCP handler definition The following example TCP handler definition will forward event data6 to a TCP socket8 ie 1001994444 and will timeout if an acknowledgement ACK is not received within 30 seconds handlers exampletcphandler type tcp timeout 30 socket host 100199 port 4444 The following example UDP handler definition will forward event data6 to a UDP socket ie 100199444 handlers exampleudphandler type udp socket host 100199 port 4444 Transport handlers Transport handlers enable Sensu to publish event data to named queues on the Sensu transport5 for external services to consume Example transport handler definition The following example transport handler definition will publish event data6 to the Sensu transport on a pipe eg a queue or channel etc named examplehandlerqueue One or more instances of an external process or thirdparty application would need to subscribe to the named pipe to process the events handlers exampletransporthandler type transport pipe type direct name examplehandlerqueue Handler sets Handler set definitions allow groups of handlers ie individual collections of actions to take on event data to be referenced via a single named handler set NOTE Attributes defined on handler sets do not apply to the handlers they include For example filter filters and mutator attributes defined in a handler set will have no effect Example handler set definition The following example handler set definition will execute three handlers ie email slack and pagerduty for every event handlers notifyallthethings type set handlers email slack pagerduty Handler configuration Example handler definition The following is an example Sensu handler definition a JSON configuration file located at etcsensuconfdmailhandlerjson This handler definition uses the mailx unix command to email the event data to exampleaddresscom with the email subject sensu event The handler is named mail handlers mail type pipe command mailx s sensu event exampleaddresscom Handler definition specification Handler names handlernames Each handler definition has a unique handler name used for the definition key Every handler definition is within the handlers configuration scope9 A unique string used to nameidentify the check Cannot contain special characters or spaces Validated with Ruby regex10 wmatchhandlername HANDLER attributes The following attributes are configured within the handlers HANDLER configuration scope9 where HANDLER is a valid handler name15 type "},{"title":"Reference","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/","display_name":"Sensu Core 1.0: Reference","content":""},{"title":"Sensu Mutators","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/mutators","display_name":"Sensu Core 1.0: Sensu Mutators","content":" Reference documentation What is a Sensu mutatorwhataresensumutators The Sensu mutator specificationthesensumutatorspecification When to use a mutatorwhentouseamutator How do Sensu mutators workhowdosensumutatorswork Mutator commandsmutatorcommands What is a mutator commandwhatisamutatorcommand Mutator command argumentsmutatorcommandarguments How and where are mutator commands executedhowandwherearemutatorcommandsexecuted Mutator configurationmutatorconfiguration Example mutator definitionexamplemutatordefinition Mutator definition specificationmutatordefinitionspecification Mutator namesmutatornames Mutator attributesmutatorattributes What are Sensu mutators whataresensumutators Sensu mutators are executable scripts or other programs that modify event data1 for Sensu event handlers2 which may expect additional or modified event data eg custom attributes that are not provided by the default event data specification3 The Sensu mutator specification Accept inputdata via STDIN Able to parse a JSON data payload ie a event data1 Output JSON data the modified event data to STDOUT or STDERR Produce an exit status code to indicate state 0 indicates OK exit status codes other than 0 indicates a failure When to use a mutator Many Sensu event handlers2 will modify event data1 in the course of processing an event9 and in many cases this is recommended because modifying the event data and performing some action in memory in the same process will result in better performance than executing a mutator5 and a handler two separate processes However when multiple handlers require similar event data modifications mutators provide the ability to avoid code duplication DRY and simplify event handler logic How do Sensu mutators work Sensu mutators are applied when event handlers2 are configured to use a mutator Prior to executing a Handler the Sensu server will execute the configured mutator If the mutator is successfully executed the modified event data is then provided to the handler and the handler will be executed If the mutator fails to execute for any reason an error will be logged and the handler will not be executed The complete process may be described as follows When the Sensu server is processing an event it will check for the definition of a mutator Prior to executing each handler the Sensu server will first execute the configured mutator if any for the handler If the mutator is successfully executed ie if it returns an exit status code of 0 the modified event data is provided to the handler and the handler will be executed If the mutator fails to execute ie returns a nonzero exit status code or does not complete execution within the configured timeout an error will be logged and the handler will not be executed Please refer to the Sensu event handler definition specification8 for more information about applying a mutator to an event handler see the mutator attribute Mutator commands What is a mutator command Each Sensu mutator definition6 defines a command to be executed Mutator commands are literally executable commands which will be executed on a Sensu server4 run as the sensu user Most mutator commands are provided by Sensu plugins7 Mutator command arguments Sensu mutator command attributes may include command line arguments for controlling the behavior of the command executable Many Sensu mutator plugins7 provide support for command line arguments for reusability How and where are mutator commands executed As mentioned above all mutator commands are executed by a Sensu server4 as the sensu user Commands must be executable files that are discoverable on the Sensu server system ie installed in a system PATH directory NOTE By default the Sensu installer packages will modify the system PATH for the Sensu processes to include etcsensuplugins As a result executable scripts eg plugins located in etcsensuplugins will be valid commands This allows command attributes to use relative paths for Sensu plugin commandseg command checkhttprb u httpssensuapporg Mutator configuration Example mutator definition The following is an example Sensu mutator definition a JSON configuration file located at etcsensuconfdexamplemutatorjson This mutator definition uses an imaginary Sensu plugin7 called examplemutatorrb to modify event data prior to handling the event mutators examplemutator command examplemutatorrb Mutator definition specification Mutator names mutatornames Each mutator definition has a unique mutator name used for the definition key Every mutator definition is within the mutators definition scope A unique string used to nameidentify the mutator Cannot contain special characters or spaces Validated with Ruby regex10 wmatchmutatorname Mutator attributes command "},{"title":"Sensu Plugins","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/plugins","display_name":"Sensu Core 1.0: Sensu Plugins","content":" What is a Sensu plugin Sensu plugins provide executable scripts or other programs that can be used as Sensu checks1 ie to monitor server resources services and application health or collect analyze metrics Sensu handlers2 ie to send notifications or perform other actions based on Sensu events3 or Sensu mutators3 ie to modify event data4 prior to handling For more about Sensu plugins please refer to the Plugins reference documentation5 1 checks 2 handlers 3 eventseventdata 4 mutators 5 plugins23reference"},{"title":"RabbitMQ Configuration","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/rabbitmq","display_name":"Sensu Core 1.0: RabbitMQ Configuration","content":" Reference documentation What is RabbitMQwhatisrabbitmq How does Sensu use RabbitMQhowdoessensuuserabbitmq Install RabbitMQinstallrabbitmq Configure Sensusensurabbitmqconfiguration Example configuraitonssensurabbitmqconfigurationexamples RabbitMQ definition specificaitonrabbitmqdefinitionspecification rabbitmq attributesrabbitmqattributes ssl attributessslattributes Configure RabbitMQconfigurerabbitmq Standalone configurationstandaloneconfiguration Distributed configurationdistributedconfiguration Highavailability configurationhighavailabilityconfiguration What is a RabbitMQ clusterwhatisarabbitmqcluster High availability hardware requirementshighavailabilityhardwarerequirements Install RabbitMQinstallrabbitmq Configure a RabbitMQ clusterconfigurearabbitmqcluster Configure Sensu to use the RabbitMQ clusterconfiguresensutousetherabbitmqcluster Securing RabbitMQsecuringrabbitmq RabbitMQ and SELinuxrabbitmqandselinux RabbitMQ SSLrabbitmqssl RabbitMQ SSL and Erlang 183rabbitmqsslanderlang183 What is RabbitMQ RabbitMQ is a message bus which describes itself1 as a messaging broker an intermediary for messaging It gives your applications a common platform to send and receive messages and your messages a safe place to live until received To learn more about RabbitmQ please visit the official RabbitMQ website2 How does Sensu use RabbitMQ Sensu services use RabbitMQ the default Sensu transport3 to communicate with one another Every Sensu service requires access to the same instance of RabbitMQ or a RabbitMQ cluster to function Sensu check requests and check results are sent over RabbitMQ to the approprate Sensu services Install RabbitMQ For more information about installing RabbitMQ for use with Sensu please visit the RabbitMQ installation guide5 Configure Sensu sensurabbitmqconfiguration Example configurations sensurabbitmqconfigurationexamples The following are an example RabbitMQ connection definitions each located at etcsensuconfdrabbitmqjson Example standalone configuration sensurabbitmqconfigurationexamplesstandalone rabbitmq host 127001 port 5671 vhost sensu user sensu password secret heartbeat 30 prefetch 50 ssl certchainfile etcsensusslcertpem privatekeyfile etcsensusslkeypem Example distributed configuration sensurabbitmqconfigurationexamplesdistributed rabbitmq host 10016 port 5671 vhost sensu user sensu password secret heartbeat 30 prefetch 50 ssl certchainfile etcsensusslcertpem privatekeyfile etcsensusslkeypem Example highavailability configuration sensurabbitmqconfigurationexampleshighavailability rabbitmq host 10006 port 5671 vhost sensu user sensu password secret heartbeat 30 prefetch 50 ssl certchainfile etcsensusslcertpem privatekeyfile etcsensusslkeypem host 10007 port 5671 vhost sensu user sensu password secret heartbeat 30 prefetch 50 ssl certchainfile etcsensusslcertpem privatekeyfile etcsensusslkeypem host 10008 port 5671 vhost sensu user sensu password secret heartbeat 30 prefetch 50 ssl certchainfile etcsensusslcertpem privatekeyfile etcsensusslkeypem RabbitMQ definition specification The RabbitMQ definition uses the rabbitmq definition scope rabbitmq attributes host "},{"title":"Redis Configuration","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/redis","display_name":"Sensu Core 1.0: Redis Configuration","content":" Reference documentation What is Rediswhatisredis How does Sensu use Redishowdoessensuuseredis Install Redisinstallredis Configure Sensuconfiguresensu Example configurationssensuredisconfigurationexamples Redis definition specificationredisdefinitionspecification redis attributesredisattributes sentinels attributessentinelsattributes Configure Redissensuredisconfiguration Standalone configurationredisstandaloneconfiguration Distributed configurationredisdistributedconfiguration High Availability configurationredishighavailabilityconfiguration What is Redis masterslave replicationwhatisredismasterslavereplication What is Redis Sentinelwhatisredissentinel High availability hardware requirementshighavailabilityhardwarerequirements Install Redisinstallredis Redis masterslave configurationredismasterslaveconfiguration Configure the Redis masterconfiguretheredismaster Configure the Redis slaveconfiguretheredisslave Verify masterslave replicationverifymasterslavereplication Redis Sentinel configurationredissentinelconfiguration Configure a Sentinelconfigureasentinel Verify Redis Sentinel operationverifyredissentineloperation Configure Sensu to use Redis Sentinelconfiguresensutouseredissentinel Securing Redissecuringredis What is Redis Redis1 is a keyvalue database which describes itself as an open source BSD licensed advanced keyvalue cache and store Learn more at httpredisio1 How does Sensu uses Redis howdoessensuuseredis Sensu uses Redis as a datastore2 for storing monitoring data eg a client registry3 current check results current monitoring events etc Only the Sensu server4 and API5 processes require access to Redis ie the sensuclient process does not require access to Redis All Sensu services in a cluster require access to the same instance or cluster of Redis consequently Redis does not need to be installed on every system where Sensu is installed Sensu also provides support for using Redis as a transport14 Please see the Sensu transport reference documentation14 for more information Installing Redis For more information about installing Redis for use with Sensu please visit the Redis installation guide6 Configure Sensu configuresensu Example configurations sensuredisconfigurationexamples The following are example Redis definitions at etcsensuconfdredisjson NOTE if you are using Redis as your Sensu transport14 additional configuration will need to be provided to tell Sensu to use Redis as the transport instead of RabbitMQ default please see transport configuration15 for more information Example standalone configuration sensuredisconfigurationexamplesstandalone redis host 127001 port 6379 password secret Example distributed configuration sensuredisconfigurationexamplesdistributed redis host 100123 port 6379 password secret Example highavailability configuration sensuredisconfigurationexampleshighavailability redis password yourredispassword master redis01 sentinels host 100123 port 26379 host 100124 port 26379 host 100125 port 26379 Redis DNS resolution redisdns The Sensu Redis client will resolve the provided hostname before making a connection attempt to the Redis host Resolving the DNS hostname prior to connecting allows Sensu to properly handle resolution failures log them and make further attempts to connect to the Redis host This also allows Sensu to use Amazon AWS ElastiCache multiaz automatic failover Redis definition specification The Redis definition uses the redis definition scope redis attributes host "},{"title":"Sensu Server","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/server","display_name":"Sensu Core 1.0: Sensu Server","content":" Reference documentation What is the Sensu serverwhatisthesensuserver Sensu Core vs Sensu Enterprisesensucorevssensuenterprise Check execution schedulingcheckexecutionscheduling Check scheduling algorithm synchronizationcheckschedulingalgorithmsynchronization Event processingeventprocessing Automated Sensu server task electionautomatedtaskelection Sensu server tasksservertasks Scaling Sensuscalingsensu What is the Sensu server The Sensu server schedules and publishes check execution requests1 to client subscriptions2 via a PublishSubscribe model3 and provides a scalable event processing platform4 for processing check results and monitoring events Sensu Core vs Sensu Enterprise The Sensu server comes in two flavors the opensource Sensu Core5 via the sensuserver process and Sensu Enterprise6 via the sensuenterprise process To learn more about the differences between Sensu Core and Sensu Enterprise please visit the Sensu website7 NOTE Sensu Enterprise ie the sensuenterprise process was designed to be a dropin replacement for the Sensu Core server and API ie the sensuserver and sensuapi As such any mention of the Sensu server in the Sensu documentation also applies to the sensuenterprise process for Sensu Enterprise users WARNING as noted above the sensuenterprise process is designed to replace both of the Sensu Core sensuserver and sensuapi processes Because Sensu Enterprise will load the same configuration as Sensu Core it is important that the Sensu Core processes are stopped before starting Sensu Enterprise to avoid known conflicts and processing errors such as attempting to bind on the same ports etc Check execution scheduling Check execution scheduling is performed by a Sensu server see Sensu server task election8 Checks are scheduled by querying Sensus configuration for defined checks ndash excluding check with the attributes standalone true or publish false ndash and calculating when executions should occur based on their defined intervals Check scheduling algorithm synchronization checkschedulingalgorithmsynchronization Sensu uses an internal algorithm for determining a unique cadence for Sensu checks which uniqueness is based on the check name and interval This algorithm outputs a value in milliseconds which the Sensu server will use as an offset before the next check request should be published In practice this means that ndash assuming system clocks are in sync between disparate Sensu servers ndash check requests for a given check based on the check name will be published at the exact same time The also means that in the event of a Sensu server restart andor Sensu server task reelection ie if a new Sensu server is elected to become reponsible for check execution scheduling check execution scheduling intervals will remain consistent In fact because this algorithm is also shared by the Sensu client ndash which provides decentralized check execution scheduling in the form of standalone checks22 ndash a check defined on the Sensu server and a matching standalone check defined on a Sensu client should also stay in sync with each other again assuming that system clocks are in sync and the check names and intervals are consistent Event processing The Sensu server provides a scalable event processor Event processing involves conversion of check results9 into Sensu events and then applying any defined event filters10 event data mutators11 and event handlers12 All event processing happens on a Sensu server system The event processing workflow happens in the following order Event Filter Mutator Handler NOTE events that are filtered out ie removed by Sensu event filtersfilters will not continue to be mutated by event data mutatorsmutators or event handlershandlers Sensus event processing capabilities can be distributed among multiple Sensu servers in a Sensu cluster For more information on configuring a Sensu cluster please see Scaling Sensu13 below Automated task election The Sensu server processes ie sensuserver and sensuenterprise are designed to scale horizontally14 ie by adding systems No additional configuration is required to run a cluster of Sensu servers other than the location of the transport15 and data store16 When Sensu servers start they participate in an election process to automatically distribute tasks A Sensu server may be elected for more than one task A server task can only run on one Sensu server at a time and will automatically failover to another Sensu server in the event of a service failure or restart All Sensu servers in a Sensu cluster monitor the state of task execution on a 10second interval automatically electing a new Sensu server for a task if the current one hasnt confirmed execution in more than 30 seconds Server tasks In a Sensu server cluster responsibility for a distinct set of tasks is distributed amongst members of the cluster The tasks only run on one Sensu server at a time and will automatically failover to another Sensu server in the event of a service failure or restart When adding Sensu servers to a cluster restarting the existing Sensu servers in the cluster will force a redistribution of tasks Check request publisher The Sensu server is responsible for publishing check requests to the transport for all configured checks See check execution scheduling18 for more information Client monitor The Sensu server is responsible for monitoring the client registry19 and creating client keepalive events20 for stale clients Check result monitor The Sensu server is responsible for monitoring check results and creating TTL events for check results with expired check TTLs21 Check result aggregation pruning The Sensu server is responsible for monitoring check aggregates and pruning stale aggregate results To observe which Sensu server is currently reponsible for one or more tasks see API info23 Scaling Sensu Coming soon 1 checkscheckrequests 2 clientsclientsubscriptions 3 checkspubsubchecks 4 overviewarchitectureeventprocessor 5 httpssensuapporg 6 httpssensuapporgenterprise 7 httpssensuapporgcompare 8 automatedtaskelection 9 checkscheckresults 10 filters 11 mutators 12 handlers 13 scalingsensu 14 httpsenwikipediaorgwikiScalabilityHorizontalandverticalscaling 15 transport 16 datastore 18 checkexecutionscheduling 19 clientsregistrationandregistry 20 clientskeepaliveevents 21 checkscheckttls 22 checksstandalonechecks 23 apihealthandinfo"},{"title":"Sensu Silencing","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/silencing","display_name":"Sensu Core 1.0: Sensu Silencing","content":" Reference documentation What is Sensu Silencingwhatissensusilencing When to use silencingwhentousesilencing How does silencing workhowdoessilencingwork Silencing entry specificationsilencingentryspecification Silencing entry attributessilencingentryattributes Examplesexamples Silence all checks on a specific clientsilenceallchecksonaspecificclient Silence a specific check on a specific clientsilenceaspecificcheckonaspecificclient Silence all checks on clients with a specific subscriptionsilenceallchecksonclientswithaspecificsubscription Silence a specific check on clients with a specific subscriptionsilenceaspecificcheckonclientswithaspecificsubscription Silence a specific check on every client regardless of subscriptionssilenceaspecificcheckoneveryclient Deleting silencing entriesdeletingsilencingentries Appendix Deprecated stashbased silencingappendixdeprecatedstashbasedsilencing Comparing stashbased and native silencingcomparingstashbasedandnativesilencing Migrating from stashbased silencingmigratingfromstashbasedsilencing What is Sensu Silencing As check results0 are processed by a Sensu server the server executes event handlers1 to send alerts to personnel or otherwise relay event data to external services Although event handlers can be directly configured with filters11 to improve overall signaltonoise ratio there are many scenarios in which operators receiving notifications from Sensu require an ondemand means to suppress alerts Sensus builtin silencing provides the means to suppress execution of event handlers on an adhoc basis By using a dashboard or other tool to interact with the silenced API2 operators can mute notifications onthefly The silenced API manipulates silencing entries in the Sensu data store These entries describe a combination of check name and subscription When the check name3 andor subscription4 described in a silencing entry match an event the handler will not be executed and an informational message will be logged Individual handlers may optout of silencing by configuring the handlesilenced attribute5 NOTE Silencing described in this reference document is implemented in Sensu version 026 or later and Sensu Enterprise 20 or later When to use silencing Silencing is used to prevent handlers from being triggered based on the check name present in a check result or the subscriptions associated with the client that published the check result This can be desirable in many scenarios giving operators the ability to quiet incoming alerts while coordinating their response Sensu silencing entries make it possible to Silence all checks on a specific clientsilenceallchecksonaspecificclient Silence a specific check on a specific clientsilenceaspecificcheckonaspecificclient Silence all checks on clients with a specific subscriptionsilenceallchecksonclientswithaspecificsubscription Silence a specific check on clients with a specific subscriptionsilenceaspecificcheckonclientswithaspecificsubscription Silence a specific check on every client regardless of subscriptionssilenceaspecificcheckoneveryclient In addition to the above combinations silencing entries support Expiration after a specified number of seconds Expiration after check returns to OK state resolves Describing the reason or rationale Describing the creator or entity responsible for an entry How does silencing work Silencing entries are created on an adhoc basis via the silenced API2 endpoint When silencing entries are successfully created via the API they are assigned an ID in the format SUBSCRIPTIONCHECK where SUBSCRIPTION is the name of a Sensu client subscription and CHECK is the name of a Sensu check Silencing entries can be used to silence checks on specific clients by by taking advantage of perclient subscriptions4 added in Sensu 026 eg clientCLIENTNAME These silencing entries are persisted to the silenced registry in the Sensu data store10 When the Sensu server processes subsequent check results it consults this registry to determine whether or not a matching silencing entry exists If one or more matching entries exist in the registry the event context for the check result is updated to indicate that the event is silenced and the ID of the entries which the check result matched When creating a silencing entry a combination of check and subscription can be specified but only one or the other is strictly required For example when a silencing entry is created specifying only a check its ID will contain an asterisk or wildcard in the SUBSCRIPTION position This indicates that any event with a matching check name will be marked as silenced regardless of the originating clients subscriptions Conversely a silencing entry which specifies only a subscription will have an ID with an asterisk in the CHECK position This indicates that any event where the originating clients subscriptions match the subscription specified in the entry will be marked as silenced regardless of the check name NOTE Starting with version 026 Sensu clients automatically add a subscription containing their client name prefixed with the string client For example client i424242 will automatically add subscription clienti424242 Silencing checks at the individual client level requires clients to run Sensu 026 or be manually configured with a client subscription Silencing entry specification Silencing entries are composed as a JSON document containing at least one of the required subscription or check attributes and additional optional attributes as desired Silencing entries are created updated and deleted by submitting JSON documents to endpoints on the silenced API2 via HTTP POST as shown in the examples below Silencing entry attributes check "},{"title":"SSL Configuration","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/ssl","display_name":"Sensu Core 1.0: SSL Configuration","content":" Reference documentation How does Sensu use SSLhowdoessensuusessl SSLsecured transportssslsecuredtransports Configuring Sensu RabbitMQ for SSL encryptionconfiguringsensurabbitmqforsslencryption Generate selfsigned OpenSSL certificates CAgenerateselfsignedopensslcertificatesandca Enable RabbitMQ SSL supportenablerabbitmqsslsupport Configure Sensuconfiguresensu Known limitationsknownlimitations How does Sensu use SSL All communication between Sensu services happens via the Sensu transport1 As such to secure a Sensu installation means to secure communication between all of the Sensu services and the Sensu transport via SSL encryption Sensu can operate without the use of SSL encryption however this practice is heavily discouraged SSLsecured Transports Although the Sensu transport1 library makes it possible for Sensu to leverage transport alternatives to RabbitMQ eg Redis not all transports offer SSL support eg Redis does not support SSL For this reason this reference document will focus on SSL security for Sensu with the RabbitMQ transport Configuring Sensu RabbitMQ for SSL encryption Generate selfsigned OpenSSL certificates and CA The following instructions will generate an OpenSSL certificate authority and selfsigned certificates Alternatively please refer to the official RabbitMQ SSL documentation2 for a detailed guide on configuring RabbitMQ with SSL 1 OpenSSL is required on the machine that will generate the SSL certificates Install OpenSSL on your platform UbuntuDebian sudo aptget update sudo aptget install openssl openssl version RHELCentOS sudo yum install openssl openssl version 2 Download the Sensu SSL tool wget httpsensuapporgdocs10filessensussltooltar tar xvf sensussltooltar 3 Generate an OpenSSL certificate authority and selfsigned certificates using the Sensu SSL tool cd sensussltool sslcertssh generate ls l NOTE the generated certificates will be valid for 5 years The Sensu SSL tool will generate a certificate authority SSL certificates for the RabbitMQ server and a shared SSL certificate for all of the Sensu services client certpem keycertp12 keypem reqpem sensuca cacertcer cacertpem certs 01pem 02pem indextxt indextxtattr indextxtattrold indextxtold opensslcnf private cakeypem serial serialold server certpem keycertp12 keypem reqpem sslcertssh Enable RabbitMQ SSL support 1 Stop RabbitMQ NOTE The service command will not work on CentOS 5 the sysvinit script must be used eg sudo etcinitdrabbitmqserver stop sudo service rabbitmqserver stop 2 Please refer to the official RabbitMQ documentation for enabling SSL support3 for instructions on installing the certificate authority and SSL certificates and configuring the RabbitMQ ssllisteners and ssloptions directives NOTE the RabbitMQ documentation will direct you to provide the location of three certificate files cacertfile certfile and keyfile These files correspond to the sensucacacertpem servercertpem and serverkeypem files generated by the Sensu SSL tool above We recommend copying these files to the RabbitMQ server in a new etcrabbitmqssl directory When complete your etcrabbitmqrabbitmqconfig file should contain the following configuration block rabbit ssllisteners 5671 ssloptions cacertfileetcrabbitmqsslcacertpem certfileetcrabbitmqsslcertpem keyfileetcrabbitmqsslkeypem versions tlsv12 ciphers rsaaes256cbcsha256 verifyverifypeer failifnopeercerttrue 3 Start RabbitMQ NOTE The service command will not work on CentOS 5 the sysvinit script must be used eg sudo etcinitdrabbitmqserver start sudo service rabbitmqserver start Configure Sensu 1 Install the selfsigned SSL certificates generated above by copying the clientcertpem and clientkeypem files to the etcsensussl directory on all systems running Sensu processes eg the Sensu server4 API5 and clients6 2 Add ssl definition attributes7 to your Sensu RabbitMQ configuration8 Please note the following standalone configuration example9 a JSON configuration file located at etcsensuconfdrabbitmqjson Please see the ssl attributes7 section of the RabbitMQ reference documentation for more information host 127001 port 5671 vhost sensu user sensu password secret heartbeat 30 prefetch 50 ssl certchainfile etcsensusslcertpem privatekeyfile etcsensusslkeypem WARNING please note that by default RabbitMQ will listen for SSL connections on port 5671 instead of 5672 so if you are upgrading an existing configuration please ensure that all Sensu services are attempting to connect to RabbitMQ on port 5671 3 Restart the Sensu services Known limitations You may have noticed that the instructions above only generated a single client certificate Ideally every SSL connection would use a different certificate allowing them to be individually revoked There is currently no way to tell RabbitMQ to reject a certificate If the integrity of a certificate is compromised it is common practice to regenerate and redistribute the certificate authority and certificates This process is greatly simplified with the use of configuration management tools In the future the Sensu project hopes to be able to provide a better mechanism for distributing individual certificates and providing fastsimple revocation facilities 1 transport 2 httpwwwrabbitmqcomsslhtml 3 httpwwwrabbitmqcomsslhtmlenablingssl 4 server 5 apioverview 6 clients 7 rabbitmqsslattributes 8 rabbitmqrabbitmqdefinitionspecification 9 rabbitmqstandaloneconfiguration"},{"title":"Sensu Stashes","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/stashes","display_name":"Sensu Core 1.0: Sensu Stashes","content":" Reference documentation What is a Sensu stashwhatisasensustash The Sensu keyvalue storethesensukeyvaluestore The Sensu stash specificationthesensustashspecification Example Sensu stashexamplesensustash Stash definition specificationstashdefinitionspecification Stash attributesstashattributes content attributescontentattributes Direct access to stash content datadirectaccesstostashcontentdata What is a Sensu stash A Sensu stash is a JSON document containing arbitrary JSON Hash data which is accessible via the Stashes API1 The most common use of the Sensu Stashes are via Sensu handlers which may access the Stashes API to create andor read state information that persists between handler executions NOTE Prior to Sensu 026 the ability to silence notifications was implemented in external libraries like sensuplugin using specially crafted stashes Silencing via stashes is deprecated in favor of new native silencing Please see the silencing reference documentation7 for more details The Sensu keyvalue store thesensukeyvaluestore The Stashes API1 provides a keyvalue store1 for Sensu where arbitrary JSON data ie the values can be created accessed and deleted via an arbitrary path ie the keys The Sensu stash specification Example Sensu stash The following is an example Sensu stash path pathtomystash content message hello world foo bar expire 1 Stash definition specification Stash attributes path "},{"title":"Sensu Transport","product":"Sensu Core","version":"1.0","location":"/sensu-core/1.0/reference/transport","display_name":"Sensu Core 1.0: Sensu Transport","content":" Reference documentation What is the Sensu Transportwhatisthesensutransport Selecting a transportselectingatransport Transport configurationtransportconfiguration Example transport definitionexampletransportdefinition Transport definition specificationtransportdefinitionspecification Transport attributestransportattributes What is the Sensu Transport Sensu services use a message bus eg RabbitMQ1 for communication This message bus communication is provided by the Sensu Transport2 which is a library that makes it possible to leverage alternate transport solutions in place of RabbitMQ the default transport Sensu services requires access to the same instance of the defined transport eg a RabbitMQ server or cluster to function Sensu check requests and check results are published as messages to the Sensu Transport and the corresponding Sensu services receive these messages by subscribing to the appropriate subscriptions Selecting a Transport The Sensu Transport library makes it possible to replace Sensus recommended and default transport RabbitMQ with alternative solutions There are currently two 2 transports provided with the sensutransport library RabbitMQ and Redis mdash each presenting unique performance and functional characteristics The RabbitMQ Transport recommended The RabbitMQ Transport is the original Sensu transport and continues to be the recommended solution for running Sensu in production environments Pros rabbitmqtransportpros Native SSL support Pluggable authentication framework Support for ACLs Cons rabbitmqtransportcons Adds Erlang as a runtime dependency to the Sensu architecture only on systems where RabbitMQ is running The Redis Transport The Redis Transport was an obvious alternative to the original RabbitMQ Transport because Sensu already depends on Redis as a data store Using Redis as a transport greatly simplifies Sensus architecture by removing the need to installconfigure RabbitMQ and Erlanghttpswwwerlangorg RabbitMQs runtime Pros redistransportpros Simplifies Sensu architecture by removing need for dedicated transport by using Redis as the data store and transport Comparable or better throughputperformance than RabbitMQ Cons redistransportcons No native support for SSL No support for transport consumers metrics see Health Info API4 Transport configuration Example transport definition The following is an example transport definition a JSON configuration file located at etcsensuconfdtransportjson This example transport configuration indicates that Redis should be used as the Sensu transport transport name redis reconnectonerror true highlight Transport DNS resolution transportdns The Sensu Transport will resolve provided hostnames before making connection attempts to the RabbitMQ Redis transports Resolving DNS hostnames prior to connecting allows Sensu to properly handle resolution failures log them and make further attempts to connect to the selected transport This also allows Sensu to use DNS as a transport failover mechanism Transport definition specification transportdefinitionspecification The Sensu Transport uses the transport definition scope3 Transport attributes transportattributes The following attributes are defined within the transport definition scopeconfigurationconfigurationscopes name "},{"title":"Sensu Core","product":"Sensu Core","version":"latest","location":"/sensu-core/","display_name":"Sensu Core latest: Sensu Core","content":""},{"title":"Enterprise API","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/api","display_name":"Sensu Enterprise 1.0: Enterprise API","content":" Reference documentation What is the Sensu Enterprise APIwhatisthesensuenterpriseapi Enterprise API Configurationenterpriseapiconfiguration Examplesexamples API specificationapispecification api attributesapiattributes ssl attributessslattributes Create an SSL keystorecreateansslkeystore Configure the Enterprise API for SSLconfiguretheenterpriseapiforssl"},{"title":"Built-in Filters","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/built-in-filters","display_name":"Sensu Enterprise 1.0: Built-in Filters","content":"ENTERPRISE Builtin filters are available for Sensu Enterprise0 users only Reference documentation What are builtin filterswhatarebuiltinfilters Using builtin filtersusingbuiltinfilters Using multiple builtin filtersusingmultiplebuiltinfilters What are builtin filters Sensu Enterprise has several builtin event filters used by many of the thirdparty integrations and made available to standard Sensu event handlers These enterprise filters can be used to combat alert fatigue Builtin filters usingbuiltinfilters Please refer to the reference documentation for each of the following builtin filters for more information on how to use them handlewhenfiltershandlewhen silencestashesfilterssilencestashes checkdependenciesfilterscheckdependencies Using multiple builtin filters Multiple enterprise filters can be applied to standard Sensu event handlers The following example event handler uses the handlewhen and silencestashes event filters handlers custommailer type pipe command custommailerrb filters handlewhen silencestashes 0 sensuenterprise"},{"title":"Built-in Handlers","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/built-in-handlers","display_name":"Sensu Enterprise 1.0: Built-in Handlers","content":"ENTERPRISE Builtin handlers are available for Sensu Enterprise0 users only Reference documentation What are builtin handlerswhatarebuiltinhandlers How to use builtin handlershowtousebuiltinhandlers Examplesexampleintegrationconfigurations List of builtin handlerslistofbuiltinhandlers What are builtin Handlers Sensu Enterprise ships with several builtin thirdparty integrations which provide Sensu event handlers1 These builtin handlers can be used to handle events for any check2 The Enterprise integrations use their own global configuration namespaces in combination with enterprise contact routing3 to provide granular controls over how events should be handled in a variety of circumstances How to use builtin handlers After configuring one or more enterprise handlers4 you can specify which ones are used per check or create a default handler set to specify those used by default Examples exampleintegrationconfigurations The following is an example of how to configure a Sensu check to use the builtin email integration ie Enterprise handler etcsensuconfdchecksloadbalancerlistenersjson checks loadbalancerlisteners command checkhaproxyrb s varrunhaproxysock A subscribers loadbalancer interval 20 handler email The following is an example of how to configure the Sensu default handler in order to specify one or more builtin enterprise handlers The default handler is used when a check definition does not specify one or more event handlers This example specifies the builtin email and slack enterprise handlers etcsensuconfdhandlersdefaultjson handlers default type set handlers email slack List of builtin handlers Builtin event handlers Emailintegrationsemail send email notifications for events PagerDutyintegrationspagerduty create and resolve PagerDuty incidents for events ServiceNowintegrationsservicenow create ServiceNow CMDB configuration items and incidents JIRAintegrationsjira create and resolve JIRA issues for Sensu events VictorOpsintegrationsvictorops create and resolve VictorOps messages for events OpsGenieintegrationsopsgenie create and close OpsGenie alerts for events Slackintegrationsslack send notifications to a Slack channel for events HipChatintegrationshipchat send notifications to a HipChat room for events IRCintegrationsirc send notifications to an IRC channel for events SNMPintegrationssnmp send SNMP traps to a SNMP manager Graylogintegrationsgraylog send Sensu events to Graylog Flapjackintegrationsflapjack relay Sensu check results to Flapjack Puppetintegrationspuppet deregister Sensu clients without an associated Puppet node Chefintegrationschef deregister Sensu clients without an associated Chef node EC2integrationsec2 deregister Sensu clients without an allowed EC2 instance state Event Streamintegrationseventstream send all Sensu events to a remote TCP socket InfluxDBintegrationsinfluxdb send metrics to InfluxDB Graphiteintegrationsgraphite send metrics to Graphite Wavefrontintegrationswavefront send metrics to Wavefront Libratointegrationslibrato send metrics to Librato Metrics OpenTSDBintegrationsopentsdb send metrics to OpenTSDB DataDogintegrationsdatadog create Datadog events 0 sensuenterprise 1 sensucore10referencehandlers 2 sensucore10referencechecks 3 contactrouting 4 listofbuiltinhandlers"},{"title":"Built-in Mutators","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/built-in-mutators","display_name":"Sensu Enterprise 1.0: Built-in Mutators","content":"ENTERPRISE Builtin mutators are available for Sensu Enterprise0 users only Sensu Core ships with a set of builtin mutators1 for transforming event data into JSON Ruby Hash or extracting check output Sensu Enterprise comes with additional mutators enabling thirdparty integrations and providing event handler authors with a set of supported tools with well defined specifications Enterprise mutators The outputformat mutator outputformat Sensu Enterprise simplifies the process of gaining insightful metrics from complex distributed systems The outputformat enterprise mutator makes it possible to mutate collected metrics in various formats from disparate data sources into a proprietary intermediate format2 that has been optimized for portability The outputformat enterprise mutator extracts metrics from check result output Users can specify an output format per check enabling the use of various check plugins Nagios plugins etc and data sources The outputformat mutator currently supports several popular specifications InfluxDB line protocol8 Graphite Plaintext3 Nagios PerfData4 OpenTSDB5 Wavefront Data Format9 Metrics 20 as a wire format6 Wizardvan JSON7 Example outputformat filter configuration The following is an example of how to configure an output format for a metric collection check one that is making use of a Nagios plugin This example check not only monitors NTP but also collects several metrics Note the multiple event handlers one for notifications pagerduty another for metric storage graphite checks ntp command usrlibnagiospluginscheckntp H timenrcca subscribers production interval 20 outputformat nagiosperfdata handlers pagerduty graphite Definition attributes outputformat "},{"title":"Collections","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/collections","display_name":"Sensu Enterprise 1.0: Collections","content":"Collections are a grouping of items returned by a collection query This query acts like a global search and it persists between the different views Collections can be easily shared and saved collectionsimagesenterprisedashboardcollectionspng Collection Query The most basic query is composed of a field and its value in the form of fieldvalue A query can use any field visible or not to match a value such as dcuswest1 subscriberrabbitmq subscriptionlinux teamwebops Regular Expressions The match method of Javascripts String object is used to retrieve the matches thus the following special characters are available to use exclusively in the values of a query Matches any single character For example dcastria matches the datacenter austria Matches the preceding character 0 or more times For example dccan matches the datacenters canada and vatican but not cameroon Matches the preceding character 1 or more times For example dcira matches the datacenters iran and iraq but not ireland Matches the preceding character 0 or 1 time For example dcoco matches the datacenter cameroon but not morocco Matches beginning of input For example dcpor matches the datacenter portugal but not singapore Matches end of input For example dcnea matches the datacenter guinea but not guineabissau Operators The familiar operators AND OR and NOT are supported You may use multiple operators within a single query Be aware that the use of many operators may cause higher than normal resource usage dcuseast1 AND namecentos Includes all items from the datacenter useast1 that have centos in their name dcuseast1 OR dcuswest1 Includes all items from the datacenters useast1 or uswest1 dcuseast1 NOT namecentos Includes all items from the datacenter useast1 that do not have centos in their name NOT dcuseast1 Includes all items that are not part of the datacenter useast1 dcuseast1 OR dcuswest1 NOT namecentos Includes all items from the datacenters useast1 or uswest1 that dont have centos in their name"},{"title":"Enterprise Configuration","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/configuration","display_name":"Sensu Enterprise 1.0: Enterprise Configuration","content":"Sensu Enterprise service scripts make use of certain environment variable values to configure the Java runtime environment These settings take effect prior to Sensu Enterprise loading configuration files from disk as described in Sensu Configuration1 reference documentation Values for the environment variables described in this document should be set by editing etcdefaultsensuenterprise After changing values in this file the sensuenterprise service must be restarted before the new values can take effect Sensu Enterprise environment variables The Sensu Enterprise honors the following environment variables For configuration honored by both Sensu Enterprise and Sensu Core see the Sensu configuration reference documentation1 HEAPSIZE "},{"title":"Contact Routing","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/contact-routing","display_name":"Sensu Enterprise 1.0: Contact Routing","content":" Reference documentation What is contact routingwhatiscontactrouting How does contact routing workhowdoescontactroutingwork Contact Routing configurationcontactroutingconfiguration Example Contact Routing definitionexamplecontactroutingdefinition Contact Routing definition specificationcontactroutingdefinitionspecification CONTACT attributescontactattributes What is contact routing Every incident or outage has an ideal first responder a team or individual with the knowledge to triage and address the issue Sensu Enterprise contact routing makes it possible to assign checks to specific teams andor individuals reducing mean time to response and recovery MTTR Contact routing works with all of the Sensu Enterprise thirdparty notification and metric integrations How does contact routing work Sensu Enterprise contacts are defined in JSON configuration files which we recommend to store in the etcsensuconfdcontacts directory A contact is composed of a name and configuration overrides for one or more of Sensu Enterprises builtin integrations A contact in Sensu Enterprise is not too dissimilar from a contact on your phone which usually have a name and one or more identifiers for various communication channels eg a phone number email address Twitter username etc The following example contact definition provides overrides for the Sensu Enterprise email and Slack integration default configuration settings contacts support email to supportsensuappcom slack channel support Once defined Sensu Enterprise contacts are used the same way in which you use contacts on your phone ndash by selecting a communication channel eg phone call SMS email etc ndash and then selecting the contact With Sensu Enterprise contact routing the communication channels are builtin handlers integrations1 and the selection of which channel to use is managed by a check definition or client definition The following example check definition will use the builtin Sensu Enterprise email integration event handler notifying the support contact for any corresponding events checks examplecheck command dosomethingrb interval 30 handler email contact support Contact routing configuration Example contact routing definition The following is an example contact routing definition ie a contact a JSON configuration file located at etcsensuconfdcontactsopsjson contacts support pagerduty servicekey r3FPuDvNOTEDyQYCc7trBkymIFcy2NkE slack channel support username sensu Contact Routing definition specification Contact names Each contact routing definition has a unique contact name used for the definition key All contacts must be defined within the contacts configuration scope2 and comply with the following requirements A unique string used to nameidentify the check Cannot contain special characters or spaces Validated with Ruby regex3 wmatchcheckname CONTACT attributes Contact routing attributes are configured within the contacts CONTACT configuration scope where CONTACT is a valid contact name3 Contact definition attributes are configuration overrides for builtin integrations eg Email4 Slack5 PagerDuty6 ServiceNow7 etc see the builtin handlers reference documentation1 for a complete listing EXAMPLES contactattributesexamples In most cases contact definitions are used to provide partial integration handler attribute overrides The following example only provides a to recipient attribute to override the default email integration configuration contacts support email to supportexamplecom However contact definitions are not limited to providing a single attribute mdash they can be used to provide multiple attributes or even complete integration handler definitions potentially overriding the entire default definition For example a contact could be used to provide an email integration definition to use an alternate SMTP server from the default configuration contacts support email smtp address smtpsupportexamplecom port 587 opensslverifymode none enablestarttlsauto true authentication plain username postmastersupportexamplecom password SECRET to supportsupportexamplecom from noreplysupportexamplecom 1 builtinhandlers 2 sensucore10referenceconfigurationconfigurationscopes 3 contactnames 4 integrationsemail 5 integrationsslack 6 integrationspagerduty 7 integrationsservicenow"},{"title":"Sensu Dashboard","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/dashboard","display_name":"Sensu Enterprise 1.0: Sensu Dashboard","content":" Reference Documentation What is the Sensu Enterprise Dashboardwhatisthesensuenterprisedashboard What is Uchiwawhatisuchiwa What is the Sensu Enterprise Consolewhatisthesensuenterpriseconsole What is a Sensu datacenterwhatisasensudatacenter Dashboard configurationdashboardconfiguration Example dashboard configurationexampledashboardconfiguration Dashboard configuration attributesdashboardconfigurationattributes sensu attributessensuattributes dashboard attributesdashboardattributes auth attributesauthattributes audit attributesauditattributes github attributesgithubattributes gitlab attributesgitlabattributes ldap attributesldapattributes oidc attributesoidcattributes What is the Sensu Enterprise Dashboard The Sensu Enterprise Dashboard is a simple webbased application that provides realtime visibility into Sensu monitoring data with dedicated views for monitoring events clients checks aggregates data centers and more The dashboard provides powerful global search features for filtering views so users can focus on the data thats important to them The dashboard also provides basic operational controls to acknowledge or otherwise silence monitoring events request ad hoc execution of monitoring checks and much more What is Uchiwa The Sensu Enterprise Dashboard is based on the opensource ndash and community developed ndash Uchiwa2 dashboard Very much like the relationship between Sensu Core and Sensu Enterprise the Sensu Enterprise Dashboard builds on top of Uchiwa via a number of addedvalue extensions eg Role Based Access Controls3 LDAP4 GitHub5 and GitLab6 authentication Audit Logging7 etc which development also results in many contributions to the opensource Uchiwa dashboard project What is the Sensu Enterprise Console The Sensu Enterprise Console is a federated API endpoint provided by the Sensu Enterprise Dashboard for API access to multiple Sensu datacenters1 available in Sensu Enterprise Dashboard version 110 and newer This API provides addedvalue features including tokenbased authentication and granular rolebased access controls16 NOTE the Sensu Enterprise Dashboard is comprised of two components a backend service API for aggregating monitoring data from one or more Sensu datacenters5 and a web application for displaying this information As of Sensu Enterprise Dashboard version 110 this Sensu Enterprise Dashboard backend has been updated so that it provides the same API endpoints as the Sensu API1 Prior to version 110 the Sensu Enterprise Dashboard backend used different API routes for accessing data from specific datacenters for example client data was accessible via clientsuswest1client instead of clientsclientdcuswest1 Version 111 introduced access tokenbased authentication and version 112 introduced RBAC for the Console API What is a Sensu datacenter The Sensu Enterprise Dashboard provides access to monitoring data from one or more Sensu datacenters A Sensu datacenter is simply a Sensu API endpoint which corresponds to a Sensu installation consisting of one or more Sensu servers in cluster multiple API endpoints may be provided by a single Sensu installation or cluster Dashboard configuration Example dashboard configuration The following is the bare minimum that should be included in your Sensu Enterprise Dashboard configuration sensu name sensuserver1 host api1examplecom port 4567 dashboard host 0000 port 3000 NOTE the Sensu Enterprise Dashboard requires two configuration scopes sensu and dashboard see Dashboard definition specification8 below Dashboard definition specification dashboardconfigurationattributes The Sensu Enterprise dashboard uses two configuration scopes9 the sensu configuration scope provides connection details for one or more Sensu API endpoints ie datacenters1 and the dashboard configuration scope is used to configure the behavior of the dashboard itself NOTE by default the Sensu Enterprise Dashboard will load configuration from etcsensudashboardjson andor from JSON configuration files located in etcsensudashboarddjson with the same configuration merging behavior as described here10 sensu attributes sensuattributes name "},{"title":"check_dependencies","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/filters/check-dependencies","display_name":"Sensu Enterprise 1.0: check_dependencies","content":"ENTERPRISE Builtin filters are available for Sensu Enterprise0 users only Reference documentation Overviewoverview Configurationconfiguration Examplesexamples Filter specificationfilterspecification CHECK attributescheckattributes Overview The checkdependencies enterprise filter is used to filter events when an event already exists for a defined check dependency enabling the user to reduce notification noise and only be notified for the root cause of a given failure Check dependencies can be defined in the check definition using dependencies an array of checks eg checkapp or Sensu clientcheck pairs eg db01checkmysql Configuration Examples examples The following is an example of how to configure a check dependency for a check The example check monitors a web application API and has a dependency on another check that monitors the local MySQL database checks webapplicationapi command checkhttprb u httpslocalhost8080apiv1health subscribers webapplication interval 20 dependencies mysql The webapplicationapi check could depend on a check executed by another Sensu client in this example a Sensu client named db01 checks webapplicationapi command checkhttprb u httpslocalhost8080apiv1health subscribers webapplication interval 20 dependencies db01mysql The following is an example of how to apply the checkdependencies enterprise filter to a standard Sensu pipe handler handlers custommailer type pipe command custommailerrb filter checkdependencies Filter specification CHECK attributes The following attributes are configured within the checks CHECK configuration scope1 dependencies "},{"title":"handle_when","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/filters/handle-when","display_name":"Sensu Enterprise 1.0: handle_when","content":"ENTERPRISE Builtin filters are available for Sensu Enterprise0 users only Reference documentation Overviewoverview Configurationconfiguration Examplesexamples Filter specificationfilterspecification handlewhen attributeshandlewhenattributes Overview The handlewhen enterprise filter is used to reduce notification noise Users can define a minimum number of event occurrences before notifications will be sent Users can also specify a reset time in seconds to reset where recurrences are counted from to control when reminderupdate notifications are sent By default occurrences is set to 1 and reset is 1800 30 minutes The handlewhen filter is used by all of the enterprise thirdparty integrations1 Configuration Examples examples The following is an example of how to configure a check to only notify after 2 occurrences and send reminderupdate notifications every 20 minutes Sensu Enterprise integrations and standard event handlers using the handlewhen enterprise filter will have events filtered unless these conditions are met checks loadbalancerlisteners command checkhaproxyrb s varrunhaproxysock A subscribers loadbalancer interval 20 handlewhen occurrences 2 reset 1200 The following is an example of how to apply the handlewhen enterprise filter to a standard Sensu pipe handler handlers custommailer type pipe command custommailerrb filter handlewhen Filter specification handlewhen attributes handlewhenattributes The following attributes are configured within the handlewhen configuration scope2 occurrences "},{"title":"Filters","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/filters/","display_name":"Sensu Enterprise 1.0: Filters","content":""},{"title":"silence_stashes","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/filters/silence-stashes","display_name":"Sensu Enterprise 1.0: silence_stashes","content":"ENTERPRISE Builtin filters are available for Sensu Enterprise0 users only Reference documentation Overviewoverview Configurationconfiguration Examplesexamples Filter specificationfilterspecification"},{"title":"Heads-Up Display","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/hud","display_name":"Sensu Enterprise 1.0: Heads-Up Display","content":"As of version 13 a new Heads Up Display HUD has been added to the Sensu Enterprise Dashboard which provides an ataglance view into the overall health of your infrastructure via a set of builtin graphs and status widgets headsup display screenshotimagesenterprisedashboardhudpng HUD RBAC Support The HUD is scoped according to any existing Sensu Enterprise Dashboard RBACenterprisedashboardconfigurationrolebasedaccesscontrolsrbac controls For example if a user is a member of a role with limited access to Sensu data they will only see history graphs and status widgets corresponding to the Sensu Subscriptions andor Datacenters they have access to NOTE At this time history graph data is stored in local storage via the browser which means that history graph data will only be available for as long as the user has the Sensu Enterprise Dashboard open An upcoming release of Sensu Enterprise will be providing this data via a new metrics API at which point history graph data will not be stored in the browser and a full 8hours of history will be available at all times Features History Graphs The Sensu Enterprise Dashboard HUD includes two history graphs which provide ataglance visibility for up to 8hours of monitoring system history captured in 10second intervals Event History Graph The Event History Graph records the state of Sensu events every 10 seconds The graph will display the total count of critical red warning yellow silenced gray and unknown black events The Event History Graph retains the last 8hours of event history Client History Graph The Client History Graph records the state of Sensu clients every 10 seconds The graph will display the total count of critical red warning yellow silenced gray and healthy green clients The Client History Graph retains the last 8hours of client history Status Summary Widgets The Sensu Enterprise Dashboard HUD includes three columns of status widgets which provide ataglance visibility into the status of Sensu Checks Events and Datacenters Each column will only display widgets corresponding to the current state of the monitoring system eg if there are no Critical events the Critical event count widget will not be displayed Check Status Summary Widgets The Check Status Summary widgets provide realtime counts for the current state of Sensu Checks ie critical red warning yellow silenced gray unknown black and healthy green Client Status Summary Widgets The Client Status Summary widgets provide realtime counts for the current state of Sensu Clients ie critical red warning yellow silenced gray unknown black and healthy green Datacenter Status Summary Widgets The Datacenter Status Summary widgets provide realtime counts for the current state of the datacenters ie Sensu Enterprise servers"},{"title":"Sensu Enterprise","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/","display_name":"Sensu Enterprise 1.0: Sensu Enterprise","content":""},{"title":"Chef","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/chef","display_name":"Sensu Enterprise 1.0: Chef","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification chef attributeschefattributes Overview Deregister Sensu clients from the client registry if they no longer have associated Chef2 node data3 This integration can only work if Sensu clients are named using the Chef node name for the machine on which they reside The chef enterprise handler requires Chef Server API credentials the local chefclient configuration can be used as a reference Configuration Examples examples The following is an example global configuration for the chef enterprise handler integration chef endpoint httpsapichefioorganizationsexample flavor enterprise client i424242 key etcchefi424242pem sslpemfile etcchefsslpem sslverify true proxyaddress proxyexamplecom proxyport 8080 proxyusername chef proxypassword secret timeout 10 Integration Specification NOTE the following integration definition attributes may be overwritten by the corresponding Sensu client definition chef attributes4 which are included in event data5 chef attributes The following attributes are configured within the chef configuration scope6 endpoint "},{"title":"DataDog","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/datadog","display_name":"Sensu Enterprise 1.0: DataDog","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification datadog attributesdatadogattributes Overview Create Datadog2 events for Sensu events After managing your Datadog account API key3 configure the handler integration with your API key Configuration Examples examples The following is an example global configuration for the datadog enterprise event handler integration datadog apikey 9775a026f1ca7d1c6c5af9d94d9595a4 timeout 10 Integration Specification datadog attributes The following attributes are configured within the datadog configuration scope4 apikey "},{"title":"EC2","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/ec2","display_name":"Sensu Enterprise 1.0: EC2","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification ec2 attributesec2attributes Overview Deregister Sensu clients from the client registry if they no longer have an associated Amazon Web Services AWS2 EC2 instance in the allowed states This enterprise handler integration will only work if Sensu clients are named using the EC2 instance ID for the instance on which they reside The ec2 enterprise handler requires valid AWS IAM user credentials3 with the EC2 describe instances action in a policy eg ec2DescribeInstances Configuration Examples examples The following is an example global configuration for the ec2 enterprise handler integration ec2 region uswest2 accesskeyid AlygD0X6Z4Xr2m3gl70J secretaccesskey y9Jt5OqNOqdy5NCFjhcUsHMb6YqSbReLAJsy4d6obSZIWySv allowedinstancestates running timeout 10 Integration Specification NOTE the following integration definition attributes may be overwritten by the corresponding Sensu client definition ec2 attributes4 which are included in event data5 ec2 attributes The following attributes are configured within the ec2 configuration scope6 region "},{"title":"Email","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/email","display_name":"Sensu Enterprise 1.0: Email","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Custom email templatescustomemailtemplates Examplescustomemailtemplatesexample Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification email attributesemailattributes smtp attributessmtpattributes templates attributestemplatesattributes Overview Send email notifications for events using SMTP Custom email templates As of Sensu Enterprise version 23 the Sensu Enterprise email integration provides support for creating custom email templates using ERB a templating language based on Ruby Sensu Enterprise make an event variable available to the ERB template containing the complete event data payload4 NOTE the Puppet reference documentation provides a helpful introduction to ERB templating syntax5 Examples customemailtemplatesexample The following example demonstrates how to access the Sensu event variable from a custom ERB template Hi there Sensu has detected a monitoring event Please note the following details Client Check Output For more information please consult the Sensu Enterprise dashboard httpssensuexamplecomclientcheck monitoringlove Team Sensu Configuration Examples examples The following is an example configuration for the email enterprise event handler integration email smtp address smtpexamplecom port 587 opensslverifymode none enablestarttlsauto true authentication plain username postmasterexamplecom password SECRET to supportexamplecom from noreplyexamplecom timeout 10 Integration specification email attributes The following attributes are configured within the email configuration scope2 smtp "},{"title":"Event Stream","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/event_stream","display_name":"Sensu Enterprise 1.0: Event Stream","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification eventstream attributeseventstreamattributes Overview The event stream integrations sends all Sensu events2 to a remote TCP socket for complex event processing3 or stream processing andor longterm storage Configuration Examples examples The following is an example configuration for the eventstream enterprise event handler integration eventstream host 127001 port 3000 filtermetrics false Integration specification eventstream attributes eventstreamattributes host "},{"title":"Flapjack","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/flapjack","display_name":"Sensu Enterprise 1.0: Flapjack","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification flapjack attributesflapjackattributes Overview Relay Sensu results to Flapjack2 a monitoring notification routing and event processing system Flapjack uses Redis for event queuing this integration sends event data to Flapjack through Redis using the Flapjack event format NOTE checks DO NOT need to specify flapjack as an event handler as every check result will be relayed to Flapjack if the integration is configured Configuration Examples examples The following is an example global configuration for the flapjack enterprise integration flapjack host redisexamplecom port 6379 db 0 channel events filtermetrics false Integration Specification flapjack attributes The following attributes are configured within the flapjack configuration scope3 host "},{"title":"Graphite","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/graphite","display_name":"Sensu Enterprise 1.0: Graphite","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification graphite attributesgraphiteattributes Overview Send metrics to Graphite2 using the plaintext protocol over TCP The graphite enterprise handler is also capable of sending metrics to Hosted Graphite3 using the prefix attribute to prefix metric names with the Hosted Graphite API key This handler uses the outputformat mutator Configuration Examples examples The following is an example global configuration for the graphite enterprise handler integration graphite host graphiteexamplecom port 2003 prefixsource false prefix production Integration Specification graphite attributes The following attributes are configured within the graphite configuration scope4 host "},{"title":"Graylog","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/graylog","display_name":"Sensu Enterprise 1.0: Graylog","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification graylog attributesgraylogattributes Overview The integration sends event data to a Graylog2 RawPlaintext TCP input3 This integration requires a Graylog JSON extractor4 Configuration Examples examples The following is an example configuration for the graylog enterprise event handler integration graylog host 127001 port 5555 timeout 10 Integration specification graylog attributes host "},{"title":"HipChat","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/hipchat","display_name":"Sensu Enterprise 1.0: HipChat","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification hipchat attributeshipchatattributes Overview Send notifications to a HipChat2 room for events After creating a HipChat API token3 configure the handler integration with the provided API token Configuration Examples examples The following is an example global configuration for the hipchat enterprise event handler integration hipchat apitoken L7kVQzXF7c5eUMYUon6INaSVRDU8mP apiversion v2 username sensu room Operations timeout 10 Integration Specification hipchat attributes The following attributes are configured within the hipchat configuration scope4 apitoken "},{"title":"Integrations","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/","display_name":"Sensu Enterprise 1.0: Integrations","content":""},{"title":"InfluxDB","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/influxdb","display_name":"Sensu Enterprise 1.0: InfluxDB","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification influxdb attributesinfluxdbattributes Overview Send metrics to InfluxDB2 using the InfluxDB HTTP API Configuration Examples examples The following is an example global configuration for the influxdb enterprise handler integration influxdb host 8888 port 8086 username root password Bfw3Bdrn5WfqvOl1 apiversion 09 Integration specification influxdb attributes The following attributes are configured within the influxdb configuration scope3 host "},{"title":"IRC","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/irc","display_name":"Sensu Enterprise 1.0: IRC","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification irc attributesircattributes Overview Send notifications to an Internet Relay Chat IRC channel for events Configuration Examples examples The following is an example global configuration for the irc enterprise event handler integration irc uri ircnickpassexamplecom6697ops ssl true nickservpassword NICKSERVPASSWORD channelpassword CHANNELPASSWORD join false timeout 10 Integration Specification irc attributes The following attributes are configured within the irc configuration scope2 url "},{"title":"JIRA","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/jira","display_name":"Sensu Enterprise 1.0: JIRA","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration specificationintegrationspecification jira attributesjiraattributes Overview Create and resolve Jira2 issues for Sensu events3 Configuration Examples examples The following is an example global configuration for the jira enterprise event handler integration jira host jiraexamplecom user admin password secret project Sensu timeout 10 Integration Specification jira attributes The following attributes are configured within the jira configuration scope4 host "},{"title":"Librato","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/librato","display_name":"Sensu Enterprise 1.0: Librato","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification librato attributeslibratoattributes Overview Send metrics to Librato2 Metrics using the HTTP API Configuration Examples examples The following is an example global configuration for the librato enterprise handler integration librato email supportexamplecom apikey 90SHpjPOFqd2YJFIX9rzDq7ik6CiDmqu2AvqcXJAX3buIwcOGqIOgNilwKMjpStO Integration Specification librato attributes The following attributes are configured within the librato configuration scope3 email "},{"title":"OpenTSDB","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/opentsdb","display_name":"Sensu Enterprise 1.0: OpenTSDB","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification opentsdb attributesopentsdbattributes Overview Send metrics to OpenTSDB2 using the telnet protocol over TCP This handler uses the outputformatmutator Configuration Examples examples The following is an example global configuration for the opentsdb enterprise handler integration opentsdb host opentsdbexamplecom port 4242 taghost true Integration Specification opentsdb attributes The following attributes are configured within the opentsdb configuration scope3 host "},{"title":"OpsGenie","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/opsgenie","display_name":"Sensu Enterprise 1.0: OpsGenie","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification opsgenie attributesopsgenieattributes Overview Create and close OpsGenie2 alerts for events Configuration Examples examples The following is an example global configuration for the opsgenie enterprise event handler integration opsgenie apikey eed02a0d85a4427b851a18dd8fd80d93 source Sensu Enterprise AWS teams ops web recipients afterhours tags production overwritesquiethours true timeout 10 Integration Specification opsgenie attributes The following attributes are configured within the opsgenie configuration scope3 apikey "},{"title":"PagerDuty","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/pagerduty","display_name":"Sensu Enterprise 1.0: PagerDuty","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration specificationintegrationspecification pagerduty attributespagerdutyattributes Overview Create and resolve PagerDuty2 incidents for events After configuring a service in PagerDuty3 configure the handler integration with the provided service key Configuration Examples examples The following is an example global configuration for the pagerduty enterprise event handler integration pagerduty servicekey r3FPuDvNOTEDyQYCc7trBkymIFcy2NkE timeout 10 Integration Specification pagerduty attributes The following attributes are configured within the pagerduty configuration scope4 servicekey "},{"title":"Puppet","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/puppet","display_name":"Sensu Enterprise 1.0: Puppet","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification puppet attributespuppetattributes ssl attributessslattributes Overview Deregister Sensu clients from the client registry if they no longer have an associated Puppet2 node The puppet enterprise handler requires access to a SSL truststore and keystore containing a valid and whitelisted Puppet certificate private key and CA The local Puppet agent certificate private key and CA can be used Configuration Examples examples The following is an example global configuration for the puppet enterprise handler integration puppet endpoint https1001128081pdbqueryv4nodes ssl keystorefile etcsensusslpuppetkeystorejks keystorepassword secret truststorefile etcsensusslpuppettruststorejks truststorepassword secret timeout 10 The Puppet enterprise handler is most commonly used as part of the keepalive set handler For example handlers keepalive type set handlers pagerduty puppet When querying PuppetDB for a node by default Sensu will use the Sensu clients name for the Puppet node name Individual Sensu clients can override the name of their corresponding Puppet node using specific client definition attributes The following is an example client definition specifying its Puppet node name client name i424242 address 8888 subscriptions production webserver puppet nodename webserver01examplecom Integration Specification NOTE the following integration definition attributes may be overwritten by the corresponding Sensu client definition puppet attributes3 which are included in event data4 puppet attributes The following attributes are configured within the puppet configuration scope5 endpoint "},{"title":"Rollbar","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/rollbar","display_name":"Sensu Enterprise 1.0: Rollbar","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration specificationintegrationspecification rollbar attributesrollbarattributes Overview Create and resolve Rollbar2 messagesitems for Sensu events3 Configuration Examples examples The following is an example global configuration for the rollbar enterprise event handler integration rollbar accesstokenread 2ae6bccccf534b9c8749a4327671e711 accesstokenwrite 944872fdbfba40c48305fc8cd73707b5 accesstokenpatch f34948101a714661a83dcd8dbe6a167a timeout 30 Integration Specification rollbar attributes The following attributes are configured within the rollbar configuration scope4 accesstokenread "},{"title":"ServiceNow","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/servicenow","display_name":"Sensu Enterprise 1.0: ServiceNow","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification servicenow attributesservicenowattributes Overview Create ServiceNow2 configuration items3 upon Sensu client registration4 createresolve ServiceNow incidents andor create ServiceNow events for Sensu events5 Configuration Examples examples The following is an example global configuration for the servicenow enterprise event handler integration servicenow host dev42servicenowcom user admin password secret createcmdbci true cmdbcitable cmdbciserver incidentmanagement true incidenttable incident timeout 10 When creating ServiceNow configuration items6 by default Sensu will use the clients name for the item name Individual Sensu clients can override the name of their corresponding configuration item using specific client definition attributes In addition to specifying a item name any valid CMDB table attributes fields values may also be set eg osversion The following is an example client definition7 specifying its ServiceNow configuration item attributes client name i424242 address 8888 subscriptions production webserver servicenow configurationitem name webserver01examplecom osversion 1404 Integration Specification NOTE the following integration definition attributes may be overwritten by the corresponding Sensu client definition servicenow attributes8 which are included in event data9 servicenow attributes The following attributes are configured within the servicenow configuration scope10 host "},{"title":"Slack","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/slack","display_name":"Sensu Enterprise 1.0: Slack","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification slack attributesslackattributes Overview Send notifications to a Slack2 channel for events After configuring an incoming webhook in Slack3 configure the handler integration with the provided webhook url Configuration Examples examples The following is an example global configuration for the slack enterprise event handler integration slack webhookurl httpshooksslackcomservicesIB6JgRmRJeL7Hgo6kFCckJm8E4Yt8X3i6QRKHWBekc username sensu channel ops timeout 10 Integration Specification slack attributes The following attributes are configured within the slack configuration scope4 webhookurl "},{"title":"SNMP","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/snmp","display_name":"Sensu Enterprise 1.0: SNMP","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Sensu Enterprise MIBssensuenterprisemibs Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification snmp attributessnmpattributes Overview Send SNMP traps to a SNMP manager Sensu Enterprise provides two SNMP MIB management information base modules for this integration The SNMP integration is capable of creating either SNMPv1 or SNMPv2 traps for Sensu events By default SNMPv2 traps are created unless the integration is configured for SNMPv1 eg version 1 The SNMP manager that will be receiving SNMP traps from Sensu Enterprise should load the appropriate provided MIBs The Sensu Enterprise SNMP MIB files can be altered to better fit certain environments and SNMP configurations Sensu Enterprise MIBs SNMPv1 MIBs RFC1212MIBtxtfilesRFC1212MIBtxt RFC1215MIBtxtfilesRFC1215MIBtxt SENSUENTERPRISEV1MIBtxtfilesSENSUENTERPRISEV1MIBtxt SNMPv2 MIBs SENSUENTERPRISEROOTMIBtxtfilesSENSUENTERPRISEROOTMIBtxt SENSUENTERPRISENOTIFYMIBtxtfilesSENSUENTERPRISENOTIFYMIBtxt Configuration Examples examples The following is an example global configuration for the snmp enterprise event handler integration snmp host 8888 port 162 community public version 2 varbindtrim 200 Integration Specification snmp attributes The following attributes are configured within the snmp configuration scope2 host "},{"title":"VictorOps","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/victorops","display_name":"Sensu Enterprise 1.0: VictorOps","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification victorops attributesvictoropsattributes Overview Create VictorOps2 messages for events Configuration Examples examples The following is an example global configuration for the victorops enterprise event handler integration victorops apikey a53265cdd2effa32fc54de52659a routingkey everyone timeout 10 Integration Specification victorops attributes The following attributes are configured within the victorops configuration scope3 apikey "},{"title":"Wavefront","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/integrations/wavefront","display_name":"Sensu Enterprise 1.0: Wavefront","content":"ENTERPRISE Builtin integrations are available for Sensu Enterprise1 users only Overviewoverview Configuring a Wavefront Proxyconfiguringawavefrontproxy Configurationconfiguration Examplesexamples Integration Specificationintegrationspecification wavefront attributeswavefrontattributes Overview Send metrics to Wavefront2 using the Wavefront Data Format4 This handler uses the outputformat mutator Configuring a Wavefront Proxy To install and configure a Wavefront Proxy to receive metrics from Sensu Enterprise please refer to the Wavefront Proxy setup documentation5 Configuration Examples examples The following is an example global configuration for the wavefront enterprise handler integration wavefront host wavefrontexamplecom port 2878 Integration Specification wavefront attributes The following attributes are configured within the wavefront configuration scope3 host "},{"title":"Sensu Enterprise","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/overview","display_name":"Sensu Enterprise 1.0: Sensu Enterprise","content":" Overview What is Sensu Enterprisewhatissensuenterprise Upgrading to Sensu Enterpriseupgradingtosensuenterprise Reference documentationreferencedocumentation What is Sensu Enterprise Sensu Enterprise1 is a dropin replacement for Sensu Core the FREE open source version of Sensu that provides addedvalue features like contact routing2 several builtin thirdparty integrations3 and more Sensu Enterprise also includes FREE annual training4 and enterpriseclass support5 We like to think of the distinction between Sensu Core and Sensu Enterprise as the difference between a framework and a product The purpose of this documentation is to help Sensu Enterprise users configure their installation making use of the many thirdparty integrations and features Sensu Enterprise has to offer Sensu Enterprise integrates with thirdparty tools services to provide support for creatingresolving incidents oncall rotation scheduling storing time series data metrics relaying events deregistering sensuclients for terminated nodes andor notifying contacts via various media Upgrading to Sensu Enterprise Sensu Enterprise is designed to be a dropin replacement for the Sensu Core server6 and API7 so for users who are upgrading to Sensu Enterprise from Sensu Core no configuration changes are required to resume simply terminate the sensuserver and sensuapi processes and start the sensuenterprise process to resume operation of Sensu see the Sensu Server and API installation guide8 for additional details However some configuration changes may be required to take advantage of certain thirdparty integrations or addedvalue features eg contact routing Please refer to the Sensu Enterprise reference documentation9 below for more information Reference documentation Sensu Enterprise Configurationconfiguration Sensu Enterprise Dashboarddashboard Rolebased access controlsrbacoverview RBAC for LDAPrbacrbacforldap RBAC for GitHubrbacrbacforgithub RBAC for GitLabrbacrbacforgitlab Audit Loggingrbacauditlogging Collectionscollections Heads up displayhud Sensu Enterprise APIapi Contact routingcontactrouting Builtin handlers integrationsbuiltinhandlers Emailintegrationsemail PagerDutyintegrationspagerduty ServiceNowintegrationsservicenow VictorOpsintegrationsvictorops OpsGenieintegrationsopsgenie Slackintegrationsslack HipChatintegrationshipchat IRCintegrationsirc SNMPintegrationssnmp Graylogintegrationsgraylog Flapjackintegrationsflapjack Puppetintegrationspuppet Chefintegrationschef EC2integrationsec2 Event Streamintegrationseventstream Graphiteintegrationsgraphite Libratointegrationslibrato OpenTSDBintegrationsopentsdb InfluxDBintegrationsinfluxdb DataDogintegrationsdatadog Builtin filtersbuiltinfilters 1 sensuenterprise 2 contactrouting 3 builtinhandlers 4 training 5 support 6 sensucore10referenceserver 7 sensucore10apioverview 8 installationinstallsensuserverapisensuenterprise 9 referencedocumentation"},{"title":"Audit Logging","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/rbac/audit-logging","display_name":"Sensu Enterprise 1.0: Audit Logging","content":"As of Sensu Enterprise Dashboard version 13 Audit Logging is enabled by default Audit Logging captures user events in the dashboard such as user loginlogout and any user write actions in the dashboard ie silencing checks deleting clients deleting stashes Optionally it is also possible to log all HTTP GET requests ie every view requested by the user and every search query performed by the user NOTE Audit Logging requires authentication to be enabled Example configuration audit logfile varlogsensusensuenterprisedashboardauditlog level default Audit Logging attributes logfile "},{"title":"RBAC","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/rbac/","display_name":"Sensu Enterprise 1.0: RBAC","content":""},{"title":"Role Based Access Controls","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/rbac/overview","display_name":"Sensu Enterprise 1.0: Role Based Access Controls","content":"ENTERPRISE Role based access controls are available for Sensu Enterprise0 users only Reference Documentation What are Role Based Access Controls for Sensu Enterprisewhatarerolebasedaccesscontrols How does Sensu provide RBAChowdoessensuproviderbac Supported RBAC driverssupportedrbacdrivers RBAC for the Sensu Enterprise Console APIrbacforthesensuenterpriseconsoleapi RBAC configurationrbacconfiguration Example RBAC definitionexamplerbacdefinition RBAC definition specificationrbacdefinitionspecification DRIVER attributesdriverattributes roles attributesrolesattributes methods attributesmethodsattributes What are Role Based Access Controls for Sensu Enterprise whatarerolebasedaccesscontrols Rolebased access controls RBAC are a system for restricting access to authorized users according to a role or job function RBAC for Sensu Enterprise enables administrators to grant the correct level access to many different development and operations teams without requiring them to maintain yet another user registry How does Sensu provide RBAC The Sensu Enterprise Dashboard provides comprehensive and granular RoleBased Access Controls RBAC with support for using a Lightweight Access Directory Provider LDAP GitHubcom1 GitHub Enterprise2 andor GitLab3 for authentication Roles can be defined to grant or restrict access to monitoring data based on datacenters4 Sensu subscriptions5 and even specific API endpoints see the Enterprise API reference documentation6 for more information Supported RBAC drivers Sensu Enterprise currently includes the following authentication drivers for RBAC LDAPrbacforldap GitHubrbacforgithub GitLabrbacforgitlab OIDCrbacforoidc RBAC for the Sensu Enterprise Console API As of Sensu Enterprise Dashboard version 112 RBAC configurations may be applied to the Sensu Enterprise Console API14 Access to the Sensu Enterprise Console API is controlled by access tokens which correspond to a role definition see the roles specification accessToken attribute below15 RBAC for the Console API provides granular controls for restricting access to specific API endpoints and HTTP methods eg it is possible to allow HTTP GET access to the Clients API16 but not DELETE access see the roles specification methods attribute below15 Providing an access token In a header curl H Authorization token TOKEN httpslocalhost3000events As a parameter curl httpslocalhost3000eventstokenTOKEN RBAC configuration Example RBAC definition The following is an example RBAC configuration using the RBAC for LDAP7 authentication driver a JSON configuration file located at etcsensudashboardjson dashboard host 0000 port 3000 ldap server localhost port 389 basedn cnusersdcdomaindctld binduser cnbindercnusersdcdomaindctld bindpass secret roles name guests members guestsgroup datacenters uswest1 subscriptions webserver readonly true name operators members operatorsgroup datacenters subscriptions readonly false RBAC definition specification DRIVER attributes Role based access controls for Sensu Enterprise are configured within the dashboard DRIVER configuration scope where DRIVER is one of the following ldap see RBAC for LDAP7 github see RBAC for GitHub8 gitlab see RBAC for GitLab9 roles attributes Role attributes are defined within the corresponding RBAC DRIVER10 configuration scope17 eg dashboard DRIVER roles The roles attribute is always a JSON array ie roles containing JSON hashes of role definitions The following role definition specification is common across all RBAC drivers EXAMPLE rolesattributesexample dashboard ldap roles name examplerole members examplegroup datacenters subscriptions exampleapplication readonly false ATTRIBUTES rolesattributesspecification name "},{"title":"RBAC for GitHub","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/rbac/rbac-for-github","display_name":"Sensu Enterprise 1.0: RBAC for GitHub","content":"ENTERPRISE Role based access controls are available for Sensu Enterprise6 users only Reference Documentation What is RBAC for GitHubwhatisrbacforgithub RBAC for GitHub configurationrbacforgithubconfiguration Example RBAC for GitHub definitionexamplerbacforgithubdefinition RBAC for GitHub definition specificationrbacforgithubdefinitionspecification github attributesgithubattributes roles attributesrolesattributes Register an OAuth Application in GitHubregisteranoauthapplicationingithub What is RBAC for GitHub The Sensu Enterprise Dashboard offers support for builtin Role Based Access Controls RBAC0 which depends on using some external source of truth for authentication The Sensu Enterprise Dashboard RBAC for GitHub driver provides support for using GitHubcom1 or a GitHub Enterprise2 installation for RBAC authentication RBAC for GitHub configuration Example RBAC for GitHub definition dashboard host 0000 port 3000 github clientId a8e43af034e7f2608780 clientSecret b63968394be6ed2edb61c93847ee792f31bf6216 server httpsgithubcom roles name guests members myorganizationguests datacenters uswest1 subscriptions webserver readonly true name operators members myorganizationoperators datacenters subscriptions readonly false RBAC for GitHub definition specification github attributes clientId "},{"title":"RBAC for GitLab","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/rbac/rbac-for-gitlab","display_name":"Sensu Enterprise 1.0: RBAC for GitLab","content":"ENTERPRISE Role based access controls are available for Sensu Enterprise5 users only Reference Documentation What is RBAC for GitLabwhatisrbacforgitlab RBAC for GitLab configurationrbacforgitlabconfiguration Example RBAC for GitLab definitionexamplerbacforgitlabdefinition RBAC for GitLab definition specificationrbacforgitlabdefinitionspecification gitlab attributesgitlabattributes roles attributesrolesattributes Register an OAuth Application in GitLabregisteranoauthapplicationingitlab What is RBAC for GitLab The Sensu Enterprise Dashboard offers support for builtin Role Based Access Controls RBAC0 which depends on using some external source of truth for authentication The Sensu Enterprise Dashboard RBAC for GitHub driver provides support for using GitLab1 for RBAC authentication RBAC for GitLab configuration Example RBAC for GitLab definition dashboard host 0000 port 3000 gitlab applicationId 6141d36e5ea48103bc39bb3eb5eede8735f0dd8f9788d8b30255dbf4d218628f secret 7d419a3b2f7b92edab30f963d7c0a4d1841f0dc46b4403b11146b4f1d5cb3a4e server httpsgitlabcom redirecturl httpssensuexampleorglogincallback roles name guests members myorganizationguests datacenters uswest1 subscriptions webserver readonly true name operators members myorganizationoperators datacenters subscriptions readonly false RBAC for GitLab definition specification gitlab attributes applicationid "},{"title":"RBAC for LDAP","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/rbac/rbac-for-ldap","display_name":"Sensu Enterprise 1.0: RBAC for LDAP","content":"ENTERPRISE Role based access controls are available for Sensu Enterprise5 users only Reference Documentation What is RBAC for LDAPwhatisrbacforldap LDAP provider compatibilityldapprovidercompatibility RBAC for LDAP configurationrbacforldapconfiguration Example RBAC for LDAP definitionexamplerbacforldapdefinition RBAC for LDAP definition specificationrbacforldapdefinitionspecification ldap attributesldapattributes servers attributesserversattributes roles attributesrolesattributes What is RBAC for LDAP The Sensu Enterprise Dashboard offers support for builtin Role Based Access Controls RBAC0 which depends on using some external source of truth for authentication The Sensu Enterprise Dashboard RBAC for LDAP driver provides support for using a Lightweight Directory Access Protocol LDAP provider eg Microsoft Active Directory1 OpenLDAP2 etc for RBAC authentication LDAP provider compatibility This driver is tested with Microsoft Active Directory AD and should be compatible with any standardscompliant LDAP provider RBAC for LDAP configuration Example RBAC for LDAP definition dashboard host 0000 port 3000 ldap debug false servers server localhost port 389 basedn cnusersdcdomaindctld binduser cnbindercnusersdcdomaindctld bindpass secret insecure false security starttls userattribute sAMAccountName roles name guests members guestsgroup datacenters uswest1 subscriptions webserver readonly true name operators members operatorsgroup datacenters subscriptions readonly false RBAC for LDAP definition specification ldap attributes debug "},{"title":"RBAC for OpenID Connect (OIDC)","product":"Sensu Enterprise","version":"1.0","location":"/sensu-enterprise/1.0/rbac/rbac-for-oidc","display_name":"Sensu Enterprise 1.0: RBAC for OpenID Connect (OIDC)","content":"ENTERPRISE Role based access controls are available for Sensu Enterprise3 users only Reference Documentation What is RBAC for OIDCwhatisrbacforoidc RBAC for OIDC configurationrbacforoidcconfiguration Example RBAC for OIDC definitionexamplerbacforoidcdefinition RBAC for OIDC definition specificationrbacforoidcdefinitionspecification oidc attributesoidcattributes roles attributesrolesattributes Register an OIDC Applicationregisteranoidcapplication Oktaokta PingFederatepingfederate What is RBAC for OIDC The Sensu Enterprise Dashboard offers support for builtin Role Based Access Controls RBAC0 which depends on using some external source of truth for authentication The Sensu Enterprise Dashboard RBAC for OIDC driver provides support for using the OpenID Connect 10 protocol OIDC on top of the OAuth 20 protocol for RBAC authentication RBAC for OIDC configuration Example RBAC for OIDC definition dashboard host 0000 port 3000 oidc additionalScopes groups clientId a8e43af034e7f2608780 clientSecret b63968394be6ed2edb61c93847ee792f31bf6216 insecure false redirectURL http1270014000logincallback server httpslocalhost9031 roles name guests members myorganizationguests datacenters uswest1 subscriptions webserver readonly true name operators members myorganizationoperators datacenters subscriptions readonly false RBAC for OIDC definition specification oidc attributes additionalScopes "},{"title":"Enterprise","product":"Sensu Enterprise","version":"latest","location":"/sensu-enterprise/","display_name":"Sensu Enterprise latest: Enterprise","content":""},{"title":"Sensu Enterprise Dashboard","product":"Sensu Enterprise Dashboard","version":"1.0","location":"/sensu-enterprise-dashboard/1.0/","display_name":"Sensu Enterprise Dashboard 1.0: Sensu Enterprise Dashboard","content":" COMING SOON "},{"title":"Sensu Enterprise Dashboard","product":"Sensu Enterprise Dashboard","version":"latest","location":"/sensu-enterprise-dashboard/","display_name":"Sensu Enterprise Dashboard latest: Sensu Enterprise Dashboard","content":""},{"title":"Uchiwa","product":"Uchiwa","version":"1.0","location":"/uchiwa/1.0/","display_name":"Uchiwa 1.0: Uchiwa","content":" COMING SOON "},{"title":"Uchiwa","product":"Uchiwa","version":"latest","location":"/uchiwa/","display_name":"Uchiwa latest: Uchiwa","content":""}]